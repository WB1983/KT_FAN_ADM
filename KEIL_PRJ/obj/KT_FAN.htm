<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\KT_FAN.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\KT_FAN.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6100100: Last Updated: Thu Nov  2 00:44:38 2023
<BR><P>
<H3>Maximum Stack Usage =        304 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; $Super$$main &rArr; ERT_vErrorCodeAccess &rArr; SMP_vWriteWordN &rArr; EEPROM_Write &rArr; FLASH_SIM_WriteEE &rArr; FLASH_SIM_ProgramEE &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation &rArr; FLASH_GetStatus
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[21d]">IEC60730_B_FullRamMarchCVA5</a>
 <LI><a href="#[147]">IEC60730_B_FullRamMarchC</a>
 <LI><a href="#[13f]">IEC60730_B_TranspRamMarchCXStep</a>
 <LI><a href="#[38]">CPUTstCont</a>
 <LI><a href="#[39]">CPUTstCont</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[12]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">HardFault_Handler</a><BR>
 <LI><a href="#[13]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">SVC_Handler</a><BR>
 <LI><a href="#[14]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">PendSV_Handler</a><BR>
 <LI><a href="#[33]">CSM_IRQn_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33]">CSM_IRQn_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[22]">ADC1_IRQHandler</a> from mm32_it.o(.text.ADC1_IRQHandler) referenced from startup_mm32spin0280_keil.o(RESET)
 <LI><a href="#[2a]">ADC2_IRQHandler</a> from mm32_it.o(.text.ADC2_IRQHandler) referenced from startup_mm32spin0280_keil.o(RESET)
 <LI><a href="#[0]">AMS_vInitModbus2Stm</a> from appmodbus2stm.o(.text.AMS_vInitModbus2Stm) referenced 2 times from appmodbus2stm.o(.data.MOS2_pfStatemachine)
 <LI><a href="#[3a]">AMS_vModbus2StatemachineRun</a> from appmodbus2stm.o(.text.AMS_vModbus2StatemachineRun) referenced from appmodbus2stm.o(.text.AMS_vModbus2Statemachine)
 <LI><a href="#[2e]">COMP1_2_3_4_5_IRQHandler</a> from mm32_it.o(.text.COMP1_2_3_4_5_IRQHandler) referenced from startup_mm32spin0280_keil.o(RESET)
 <LI><a href="#[38]">CPUTstCont</a> from iec60730_b_cpurunkeil.o(.text) referenced 2 times from iec60730_b_cpurunkeil.o(.text)
 <LI><a href="#[33]">CSM_IRQn_IRQHandler</a> from startup_mm32spin0280_keil.o(.text) referenced from startup_mm32spin0280_keil.o(RESET)
 <LI><a href="#[42]">CUR_bCheckMotCurrentMeasValues</a> from current.o(.text.CUR_bCheckMotCurrentMeasValues) referenced from fsmonitor.o(.rodata.FSM_atMonitorConfig)
 <LI><a href="#[1f]">DMA1_Channel1_IRQHandler</a> from mm32_it.o(.text.DMA1_Channel1_IRQHandler) referenced from startup_mm32spin0280_keil.o(RESET)
 <LI><a href="#[20]">DMA1_Channel2_3_IRQHandler</a> from mm32_it.o(.text.DMA1_Channel2_3_IRQHandler) referenced from startup_mm32spin0280_keil.o(RESET)
 <LI><a href="#[21]">DMA1_Channel4_5_IRQHandler</a> from mm32_it.o(.text.DMA1_Channel4_5_IRQHandler) referenced from startup_mm32spin0280_keil.o(RESET)
 <LI><a href="#[1b]">EXTI0_1_IRQHandler</a> from mm32_it.o(.text.EXTI0_1_IRQHandler) referenced from startup_mm32spin0280_keil.o(RESET)
 <LI><a href="#[1c]">EXTI2_3_IRQHandler</a> from mm32_it.o(.text.EXTI2_3_IRQHandler) referenced from startup_mm32spin0280_keil.o(RESET)
 <LI><a href="#[1d]">EXTI4_15_IRQHandler</a> from mm32_it.o(.text.EXTI4_15_IRQHandler) referenced from startup_mm32spin0280_keil.o(RESET)
 <LI><a href="#[19]">FLASH_IRQHandler</a> from mm32_it.o(.text.FLASH_IRQHandler) referenced from startup_mm32spin0280_keil.o(RESET)
 <LI><a href="#[1e]">HWDIV_IRQHandler</a> from mm32_it.o(.text.HWDIV_IRQHandler) referenced from startup_mm32spin0280_keil.o(RESET)
 <LI><a href="#[12]">HardFault_Handler</a> from startup_mm32spin0280_keil.o(.text) referenced from startup_mm32spin0280_keil.o(RESET)
 <LI><a href="#[2d]">I2C1_IRQHandler</a> from mm32_it.o(.text.I2C1_IRQHandler) referenced from startup_mm32spin0280_keil.o(RESET)
 <LI><a href="#[3b]">IEC60730_B_FullFlash_test</a> from iec60730_b_flashtest.o(.text.IEC60730_B_FullFlash_test) referenced from iec60730_b_startup.o(.text.Flashtest_config)
 <LI><a href="#[3c]">IEC60730_crc32Run</a> from iec60730_b_flashtest.o(.text.IEC60730_crc32Run) referenced from iec60730_b_runtimetest.o(.text.IEC60730_InitRunTimeChecks)
 <LI><a href="#[55]">M1_Fault_Fast</a> from statemachine.o(.text.M1_Fault_Fast) referenced from statemachine.o(.rodata.s_STATE_FAST)
 <LI><a href="#[59]">M1_Fault_Slow</a> from statemachine.o(.text.M1_Fault_Slow) referenced from statemachine.o(.rodata.s_STATE_SLOW)
 <LI><a href="#[56]">M1_Init_Fast</a> from statemachine.o(.text.M1_Init_Fast) referenced from statemachine.o(.rodata.s_STATE_FAST)
 <LI><a href="#[5a]">M1_Init_Slow</a> from statemachine.o(.text.M1_Init_Slow) referenced from statemachine.o(.rodata.s_STATE_SLOW)
 <LI><a href="#[49]">M1_RunAlignFast</a> from statemachine.o(.text.M1_RunAlignFast) referenced from statemachine.o(.rodata.s_M1_STATE_RUN_TABLE_FAST)
 <LI><a href="#[51]">M1_RunAlignSlow</a> from statemachine.o(.text.M1_RunAlignSlow) referenced from statemachine.o(.rodata.s_M1_STATE_RUN_TABLE_SLOW)
 <LI><a href="#[48]">M1_RunBrakeFast</a> from statemachine.o(.text.M1_RunBrakeFast) referenced from statemachine.o(.rodata.s_M1_STATE_RUN_TABLE_FAST)
 <LI><a href="#[50]">M1_RunBrakeSlow</a> from statemachine.o(.text.M1_RunBrakeSlow) referenced from statemachine.o(.rodata.s_M1_STATE_RUN_TABLE_SLOW)
 <LI><a href="#[45]">M1_RunCalibFast</a> from statemachine.o(.text.M1_RunCalibFast) referenced from statemachine.o(.rodata.s_M1_STATE_RUN_TABLE_FAST)
 <LI><a href="#[4d]">M1_RunCalibSlow</a> from statemachine.o(.text.M1_RunCalibSlow) referenced from statemachine.o(.rodata.s_M1_STATE_RUN_TABLE_SLOW)
 <LI><a href="#[4c]">M1_RunFreewheelFast</a> from statemachine.o(.text.M1_RunFreewheelFast) referenced from statemachine.o(.rodata.s_M1_STATE_RUN_TABLE_FAST)
 <LI><a href="#[54]">M1_RunFreewheelSlow</a> from statemachine.o(.text.M1_RunFreewheelSlow) referenced from statemachine.o(.rodata.s_M1_STATE_RUN_TABLE_SLOW)
 <LI><a href="#[46]">M1_RunReadyFast</a> from statemachine.o(.text.M1_RunReadyFast) referenced from statemachine.o(.rodata.s_M1_STATE_RUN_TABLE_FAST)
 <LI><a href="#[4e]">M1_RunReadySlow</a> from statemachine.o(.text.M1_RunReadySlow) referenced from statemachine.o(.rodata.s_M1_STATE_RUN_TABLE_SLOW)
 <LI><a href="#[4b]">M1_RunSpinFast</a> from statemachine.o(.text.M1_RunSpinFast) referenced from statemachine.o(.rodata.s_M1_STATE_RUN_TABLE_FAST)
 <LI><a href="#[53]">M1_RunSpinSlow</a> from statemachine.o(.text.M1_RunSpinSlow) referenced from statemachine.o(.rodata.s_M1_STATE_RUN_TABLE_SLOW)
 <LI><a href="#[4a]">M1_RunStartupFast</a> from statemachine.o(.text.M1_RunStartupFast) referenced from statemachine.o(.rodata.s_M1_STATE_RUN_TABLE_FAST)
 <LI><a href="#[52]">M1_RunStartupSlow</a> from statemachine.o(.text.M1_RunStartupSlow) referenced from statemachine.o(.rodata.s_M1_STATE_RUN_TABLE_SLOW)
 <LI><a href="#[47]">M1_RunWindDetFast</a> from statemachine.o(.text.M1_RunWindDetFast) referenced from statemachine.o(.rodata.s_M1_STATE_RUN_TABLE_FAST)
 <LI><a href="#[4f]">M1_RunWindDetSlow</a> from statemachine.o(.text.M1_RunWindDetSlow) referenced from statemachine.o(.rodata.s_M1_STATE_RUN_TABLE_SLOW)
 <LI><a href="#[58]">M1_Run_Fast</a> from statemachine.o(.text.M1_Run_Fast) referenced from statemachine.o(.rodata.s_STATE_FAST)
 <LI><a href="#[5c]">M1_Run_Slow</a> from statemachine.o(.text.M1_Run_Slow) referenced from statemachine.o(.rodata.s_STATE_SLOW)
 <LI><a href="#[57]">M1_Stop_Fast</a> from statemachine.o(.text.M1_Stop_Fast) referenced from statemachine.o(.rodata.s_STATE_FAST)
 <LI><a href="#[5b]">M1_Stop_Slow</a> from statemachine.o(.text.M1_Stop_Slow) referenced from statemachine.o(.rodata.s_STATE_SLOW)
 <LI><a href="#[b]">MOS2_vError_do</a> from appmodbus2stm.o(.text.MOS2_vError_do) referenced 2 times from appmodbus2stm.o(.data.MOS_ACTION_MAP)
 <LI><a href="#[a]">MOS2_vError_entry</a> from appmodbus2stm.o(.text.MOS2_vError_entry) referenced 2 times from appmodbus2stm.o(.data.MOS_ACTION_MAP)
 <LI><a href="#[c]">MOS2_vError_exit</a> from appmodbus2stm.o(.text.MOS2_vError_exit) referenced 2 times from appmodbus2stm.o(.data.MOS_ACTION_MAP)
 <LI><a href="#[e]">MOS2_vIdle_do</a> from appmodbus2stm.o(.text.MOS2_vIdle_do) referenced 2 times from appmodbus2stm.o(.data.MOS_ACTION_MAP)
 <LI><a href="#[d]">MOS2_vIdle_entry</a> from appmodbus2stm.o(.text.MOS2_vIdle_entry) referenced 2 times from appmodbus2stm.o(.data.MOS_ACTION_MAP)
 <LI><a href="#[f]">MOS2_vIdle_exit</a> from appmodbus2stm.o(.text.MOS2_vIdle_exit) referenced 2 times from appmodbus2stm.o(.data.MOS_ACTION_MAP)
 <LI><a href="#[2]">MOS2_vInit_do</a> from appmodbus2stm.o(.text.MOS2_vInit_do) referenced 2 times from appmodbus2stm.o(.data.MOS_ACTION_MAP)
 <LI><a href="#[1]">MOS2_vInit_entry</a> from appmodbus2stm.o(.text.MOS2_vInit_entry) referenced 2 times from appmodbus2stm.o(.data.MOS_ACTION_MAP)
 <LI><a href="#[3]">MOS2_vInit_exit</a> from appmodbus2stm.o(.text.MOS2_vInit_exit) referenced 2 times from appmodbus2stm.o(.data.MOS_ACTION_MAP)
 <LI><a href="#[8]">MOS2_vRecep_do</a> from appmodbus2stm.o(.text.MOS2_vRecep_do) referenced 2 times from appmodbus2stm.o(.data.MOS_ACTION_MAP)
 <LI><a href="#[7]">MOS2_vRecep_entry</a> from appmodbus2stm.o(.text.MOS2_vRecep_entry) referenced 2 times from appmodbus2stm.o(.data.MOS_ACTION_MAP)
 <LI><a href="#[9]">MOS2_vRecep_exit</a> from appmodbus2stm.o(.text.MOS2_vRecep_exit) referenced 2 times from appmodbus2stm.o(.data.MOS_ACTION_MAP)
 <LI><a href="#[5]">MOS2_vTrans_do</a> from appmodbus2stm.o(.text.MOS2_vTrans_do) referenced 2 times from appmodbus2stm.o(.data.MOS_ACTION_MAP)
 <LI><a href="#[4]">MOS2_vTrans_entry</a> from appmodbus2stm.o(.text.MOS2_vTrans_entry) referenced 2 times from appmodbus2stm.o(.data.MOS_ACTION_MAP)
 <LI><a href="#[6]">MOS2_vTrans_exit</a> from appmodbus2stm.o(.text.MOS2_vTrans_exit) referenced 2 times from appmodbus2stm.o(.data.MOS_ACTION_MAP)
 <LI><a href="#[3e]">MOS_vDataReceiveInterrupt</a> from modbus.o(.text.MOS_vDataReceiveInterrupt) referenced from modbus.o(.text.MOS_vCallbackInit)
 <LI><a href="#[3d]">MOS_vTimeoutInterrupt</a> from modbus.o(.text.MOS_vTimeoutInterrupt) referenced from modbus.o(.text.MOS_vCallbackInit)
 <LI><a href="#[11]">NMI_Handler</a> from iec60730_b_aux.o(.text.NMI_Handler) referenced from startup_mm32spin0280_keil.o(RESET)
 <LI><a href="#[17]">PVD_IRQHandler</a> from mm32_it.o(.text.PVD_IRQHandler) referenced from startup_mm32spin0280_keil.o(RESET)
 <LI><a href="#[18]">PWM_IRQHandler</a> from mm32_it.o(.text.PWM_IRQHandler) referenced from startup_mm32spin0280_keil.o(RESET)
 <LI><a href="#[14]">PendSV_Handler</a> from startup_mm32spin0280_keil.o(.text) referenced from startup_mm32spin0280_keil.o(RESET)
 <LI><a href="#[1a]">RCC_IRQHandler</a> from mm32_it.o(.text.RCC_IRQHandler) referenced from startup_mm32spin0280_keil.o(RESET)
 <LI><a href="#[10]">Reset_Handler</a> from startup_mm32spin0280_keil.o(.text) referenced from startup_mm32spin0280_keil.o(RESET)
 <LI><a href="#[2f]">SPI1_IRQHandler</a> from mm32_it.o(.text.SPI1_IRQHandler) referenced from startup_mm32spin0280_keil.o(RESET)
 <LI><a href="#[30]">SPI2_IRQHandler</a> from mm32_it.o(.text.SPI2_IRQHandler) referenced from startup_mm32spin0280_keil.o(RESET)
 <LI><a href="#[13]">SVC_Handler</a> from startup_mm32spin0280_keil.o(.text) referenced from startup_mm32spin0280_keil.o(RESET)
 <LI><a href="#[15]">SysTick_Handler</a> from iec60730_b_aux.o(.text.SysTick_Handler) referenced from startup_mm32spin0280_keil.o(RESET)
 <LI><a href="#[36]">SystemInit</a> from system_mm32spin0280.o(.text.SystemInit) referenced from startup_mm32spin0280_keil.o(.text)
 <LI><a href="#[29]">TIM14_IRQHandler</a> from mm32_it.o(.text.TIM14_IRQHandler) referenced from startup_mm32spin0280_keil.o(RESET)
 <LI><a href="#[2b]">TIM16_IRQHandler</a> from mm32_it.o(.text.TIM16_IRQHandler) referenced from startup_mm32spin0280_keil.o(RESET)
 <LI><a href="#[2c]">TIM17_IRQHandler</a> from mm32_it.o(.text.TIM17_IRQHandler) referenced from startup_mm32spin0280_keil.o(RESET)
 <LI><a href="#[23]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from mm32_it.o(.text.TIM1_BRK_UP_TRG_COM_IRQHandler) referenced from startup_mm32spin0280_keil.o(RESET)
 <LI><a href="#[24]">TIM1_CC_IRQHandler</a> from mm32_it.o(.text.TIM1_CC_IRQHandler) referenced from startup_mm32spin0280_keil.o(RESET)
 <LI><a href="#[25]">TIM2_IRQHandler</a> from iec60730_b_clocktest.o(.text.TIM2_IRQHandler) referenced from startup_mm32spin0280_keil.o(RESET)
 <LI><a href="#[26]">TIM3_IRQHandler</a> from mm32_it.o(.text.TIM3_IRQHandler) referenced from startup_mm32spin0280_keil.o(RESET)
 <LI><a href="#[27]">TIM8_BRK_UP_TRG_COM_IRQHandler</a> from mm32_it.o(.text.TIM8_BRK_UP_TRG_COM_IRQHandler) referenced from startup_mm32spin0280_keil.o(RESET)
 <LI><a href="#[28]">TIM8_CC_IRQHandler</a> from mm32_it.o(.text.TIM8_CC_IRQHandler) referenced from startup_mm32spin0280_keil.o(RESET)
 <LI><a href="#[31]">UART1_IRQHandler</a> from mm32_it.o(.text.UART1_IRQHandler) referenced from startup_mm32spin0280_keil.o(RESET)
 <LI><a href="#[32]">UART2_IRQHandler</a> from mm32_it.o(.text.UART2_IRQHandler) referenced from startup_mm32spin0280_keil.o(RESET)
 <LI><a href="#[34]">UART3_IRQHandler</a> from mm32_it.o(.text.UART3_IRQHandler) referenced from startup_mm32spin0280_keil.o(RESET)
 <LI><a href="#[40]">VOL_bHandleTask</a> from voltage.o(.text.VOL_bHandleTask) referenced from fsmonitor.o(.rodata.FSM_atMonitorConfig)
 <LI><a href="#[43]">VOL_bInitDcLinkVoltageMeasurement</a> from voltage.o(.text.VOL_bInitDcLinkVoltageMeasurement) referenced from fsmonitor.o(.rodata.FSM_atMonitorInitFcts)
 <LI><a href="#[41]">VOL_bVoltageErrorDetection</a> from voltage.o(.text.VOL_bVoltageErrorDetection) referenced from fsmonitor.o(.rodata.FSM_atMonitorConfig)
 <LI><a href="#[44]">VOL_vConstValueInit</a> from voltage.o(.text.VOL_vConstValueInit) referenced from fsmonitor.o(.rodata.FSM_atMonitorInitFcts)
 <LI><a href="#[16]">WWDG_IRQHandler</a> from mm32_it.o(.text.WWDG_IRQHandler) referenced from startup_mm32spin0280_keil.o(RESET)
 <LI><a href="#[37]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mm32spin0280_keil.o(.text)
 <LI><a href="#[3f]">fputc</a> from uart_classb.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[35]">main</a> from iec60730_b_startup.o(.text.$Sub$$main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[37]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_B_startup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32spin0280_keil.o(.text)
</UL>
<P><STRONG><a name="[214]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[5d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[215]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[216]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[217]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[218]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[219]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[10]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_mm32spin0280_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32spin0280_keil.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32spin0280_keil.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32spin0280_keil.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32spin0280_keil.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32spin0280_keil.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32spin0280_keil.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32spin0280_keil.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CSM_IRQn_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32spin0280_keil.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSM_IRQn_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSM_IRQn_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32spin0280_keil.o(RESET)
</UL>
<P><STRONG><a name="[166]"></a>MCF_Svm_7</STRONG> (Thumb, 428 bytes, Stack size 20 bytes, mcflib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MCF_Svm_7
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunStartupFast
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunSpinFast
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunReadyFast
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunFreewheelFast
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunAlignFast
</UL>

<P><STRONG><a name="[21a]"></a>MLIB_Sin</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, mlib.o(.text), UNUSED)

<P><STRONG><a name="[21b]"></a>MLIB_Cos</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, mlib.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>MLIB_SinCos</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, mlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MLIB_SinCos
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunStartupFast
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Current_Controller
</UL>

<P><STRONG><a name="[5f]"></a>MLIB_PIControl_Q15</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, mlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MLIB_PIControl_Q15
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLIB_ShLBi_Q31
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunSpinSlow
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Current_Controller
</UL>

<P><STRONG><a name="[61]"></a>MLIB_SMO</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, mlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MLIB_SMO
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLIB_ShLBi_Q31
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunStartupFast
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMSM_Obs
</UL>

<P><STRONG><a name="[62]"></a>MLIB_PLL</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, mlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MLIB_PLL &rArr; MLIB_AddSat_Q31
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLIB_ShLBi_Q31
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLIB_AddSat_Q31
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunStartupFast
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMSM_Obs
</UL>

<P><STRONG><a name="[21c]"></a>MLIB_Ramp_Q15</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, mlib.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>MLIB_Ramp_Q31</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, mlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MLIB_Ramp_Q31 &rArr; MLIB_AddSat_Q31
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLIB_AddSat_Q31
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunStartupSlow
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunSpinSlow
</UL>

<P><STRONG><a name="[65]"></a>IEC60730_B_RunTimeCPUTest</STRONG> (Thumb, 366 bytes, Stack size 0 bytes, iec60730_b_cpurunkeil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IEC60730_B_RunTimeCPUTest &rArr; FailSafePOR &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailSafePOR
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_B_CpuRunTime_test
</UL>

<P><STRONG><a name="[67]"></a>IEC60730_B_StartUpCPUTest</STRONG> (Thumb, 476 bytes, Stack size 0 bytes, iec60730_b_cpustartkeil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IEC60730_B_StartUpCPUTest &rArr; FailSafePOR &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailSafePOR
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_B_FullCpu_test
</UL>

<P><STRONG><a name="[21d]"></a>IEC60730_B_FullRamMarchCVA5</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iec60730_b_ramtestkeil.o(.text), UNUSED)

<P><STRONG><a name="[147]"></a>IEC60730_B_FullRamMarchC</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iec60730_b_ramtestkeil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_B_startup
</UL>

<P><STRONG><a name="[13f]"></a>IEC60730_B_TranspRamMarchCXStep</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iec60730_b_ramtestkeil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_B_TranspMarch
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Parameter
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_InitRunTimeChecks
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vCalcualteTargetSpeed
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_vSetOutputFreq
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRK_vCheckMotorLockComplex
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUR_vGetPhaseCurrentBufferSamples
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SIM_WriteLocate
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flashtest_config
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoCalPllFactor
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SIM_WriteLocate
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[11e]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOL_vTrackVoltageValues
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMR_vCheckSpeedMonitorImplement
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRK_vCheckMotorLockComplex
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPL_vEvaluateVoltageAsymmetry
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPL_vEvaluateCurrentAsymmetry
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOL_vCalculateRefVolt
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[168]"></a>abs</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, siabs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vSpeedControlModbusHandle
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vSpeedControlMasterModbusHandle
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vCalculateActualSpeedFromPU
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_Stop_Slow
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunWindDetSlow
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunStartupSlow
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunSpinSlow
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunReadyFast
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunFreewheelSlow
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunBrakeFast
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunAlignSlow
</UL>

<P><STRONG><a name="[f0]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read
</UL>

<P><STRONG><a name="[21e]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[21f]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[1d8]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDN_vConfigureStartupParam
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vCalcualteTargetSpeed
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOT_vAngleSmoothSwitch
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vSpeedControlModbusHandle
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vSpeedControlMasterModbusHandle
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vCalculateActualSpeedFromPU
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vCalcualteTargetSpeed
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDN_vConfigureStartupParam
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMR_vIndependentMotorModelCalculation
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRK_vCheckMotorLockComplex
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vSpeedControlModbusHandle
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vSpeedControlMasterModbusHandle
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vCalculateActualSpeedFromPU
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vCalcualteTargetSpeed
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDN_vConfigureStartupParam
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMR_vIndependentMotorModelCalculation
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRK_vCheckMotorLockComplex
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1ad]"></a>__aeabi_dcmple</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dcmple.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOT_vAngleSmoothSwitch
</UL>

<P><STRONG><a name="[1bb]"></a>__aeabi_dcmplt</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dcmplt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vSpeedControlModbusHandle
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vCalcualteTargetSpeed
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDN_vConfigureStartupParam
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMR_vIndependentMotorModelCalculation
</UL>

<P><STRONG><a name="[1ae]"></a>__aeabi_dcmpge</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dcmpge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpge
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vSpeedControlModbusHandle
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vCalcualteTargetSpeed
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDN_vConfigureStartupParam
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOT_vAngleSmoothSwitch
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMR_vIndependentMotorModelCalculation
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vSpeedControlModbusHandle
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vSpeedControlMasterModbusHandle
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vCalculateActualSpeedFromPU
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vCalcualteTargetSpeed
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOT_vAngleSmoothSwitch
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMR_vIndependentMotorModelCalculation
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRK_vCheckMotorLockComplex
</UL>

<P><STRONG><a name="[1d9]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDN_vConfigureStartupParam
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_d2iz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vSpeedControlModbusHandle
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vSpeedControlMasterModbusHandle
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vCalculateActualSpeedFromPU
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vCalcualteTargetSpeed
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDN_vConfigureStartupParam
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOT_vAngleSmoothSwitch
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMR_vIndependentMotorModelCalculation
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRK_vCheckMotorLockComplex
</UL>

<P><STRONG><a name="[209]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDN_vConfigureStartupParam
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[220]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[221]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[222]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[223]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>

<P><STRONG><a name="[76]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[70]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[6f]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[211]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[5e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[224]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[225]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[226]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>main</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, iec60730_b_startup.o(.text.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = main &rArr; $Super$$main &rArr; ERT_vErrorCodeAccess &rArr; SMP_vWriteWordN &rArr; EEPROM_Write &rArr; FLASH_SIM_WriteEE &rArr; FLASH_SIM_ProgramEE &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation &rArr; FLASH_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_B_startup
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[22]"></a>ADC1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mm32_it.o(.text.ADC1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32spin0280_keil.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>ADC2_IRQHandler</STRONG> (Thumb, 412 bytes, Stack size 16 bytes, mm32_it.o(.text.ADC2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ADC2_IRQHandler &rArr; FHE_vHandleTask &rArr; SMR_vSpeedEvaluation &rArr; SMR_vSpeedEvaluationComplex &rArr; SMR_vIndependentMotorModelCalculation &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STK_vTriggerSafeTime
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ADC_Result
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_u32GetSystickTimerCounter
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FHE_vHandleTask
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUR_vSetOffsetMeasState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32spin0280_keil.o(RESET)
</UL>
<P><STRONG><a name="[c0]"></a>ADC_ANY_CH_Config</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, hal_adc.o(.text.ADC_ANY_CH_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ADC_ANY_CH_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Adc_Channel_Init
</UL>

<P><STRONG><a name="[c1]"></a>ADC_ANY_Cmd</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hal_adc.o(.text.ADC_ANY_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_ANY_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Adc_Channel_Init
</UL>

<P><STRONG><a name="[bf]"></a>ADC_ANY_NUM_Config</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, hal_adc.o(.text.ADC_ANY_NUM_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_ANY_NUM_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Adc_Channel_Init
</UL>

<P><STRONG><a name="[c2]"></a>ADC_AutoInjectedConvCmd</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hal_adc.o(.text.ADC_AutoInjectedConvCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_AutoInjectedConvCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Adc_Inject_Channel_Init
</UL>

<P><STRONG><a name="[bc]"></a>ADC_Calibration</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hal_adc.o(.text.ADC_Calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Adc_Basic_Init
</UL>

<P><STRONG><a name="[15d]"></a>ADC_ClearITPendingBit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hal_adc.o(.text.ADC_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt_Init
</UL>

<P><STRONG><a name="[9b]"></a>ADC_Cmd</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hal_adc.o(.text.ADC_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Adc_Basic_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_ADC_Init
</UL>

<P><STRONG><a name="[be]"></a>ADC_ExternalTrigConvCmd</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hal_adc.o(.text.ADC_ExternalTrigConvCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_ExternalTrigConvCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Adc_Basic_Init
</UL>

<P><STRONG><a name="[15c]"></a>ADC_ITConfig</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, hal_adc.o(.text.ADC_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ADC_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt_Init
</UL>

<P><STRONG><a name="[bd]"></a>ADC_Init</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, hal_adc.o(.text.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Adc_Basic_Init
</UL>

<P><STRONG><a name="[c5]"></a>ADC_InjectedConvCmd</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hal_adc.o(.text.ADC_InjectedConvCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_InjectedConvCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Adc_Inject_Channel_Init
</UL>

<P><STRONG><a name="[c4]"></a>ADC_InjectedSequencerChannelConfig</STRONG> (Thumb, 80 bytes, Stack size 52 bytes, hal_adc.o(.text.ADC_InjectedSequencerChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ADC_InjectedSequencerChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Adc_Inject_Channel_Init
</UL>

<P><STRONG><a name="[c3]"></a>ADC_InjectedSequencerLengthConfig</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, hal_adc.o(.text.ADC_InjectedSequencerLengthConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC_InjectedSequencerLengthConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Adc_Inject_Channel_Init
</UL>

<P><STRONG><a name="[85]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 214 bytes, Stack size 56 bytes, hal_adc.o(.text.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ADC_RegularChannelConfig &rArr; ADC_TempSensorVrefintCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TempSensorVrefintCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Adc_Inject_Channel_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Adc_Channel_Init
</UL>

<P><STRONG><a name="[ba]"></a>ADC_StructInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hal_adc.o(.text.ADC_StructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_StructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Adc_Basic_Init
</UL>

<P><STRONG><a name="[86]"></a>ADC_TempSensorVrefintCmd</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hal_adc.o(.text.ADC_TempSensorVrefintCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_TempSensorVrefintCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
</UL>

<P><STRONG><a name="[0]"></a>AMS_vInitModbus2Stm</STRONG> (Thumb, 72 bytes, Stack size 64 bytes, appmodbus2stm.o(.text.AMS_vInitModbus2Stm))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AMS_vInitModbus2Stm &rArr; FSM_vInit
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_vGetEventMap
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS2_vGetActionMap
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSM_vInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appmodbus2stm.o(.data.MOS2_pfStatemachine)
</UL>
<P><STRONG><a name="[1c1]"></a>AMS_vModbus2Statemachine</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, appmodbus2stm.o(.text.AMS_vModbus2Statemachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AMS_vModbus2Statemachine
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vSpeedControlHandle
</UL>

<P><STRONG><a name="[3a]"></a>AMS_vModbus2StatemachineRun</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, appmodbus2stm.o(.text.AMS_vModbus2StatemachineRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AMS_vModbus2StatemachineRun &rArr; FSM_vActionPerfrom &rArr; FSM_vGetAction
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSM_vActionPerfrom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appmodbus2stm.o(.text.AMS_vModbus2Statemachine)
</UL>
<P><STRONG><a name="[8b]"></a>AutoCalPllFactor</STRONG> (Thumb, 204 bytes, Stack size 80 bytes, system_mm32spin0280.o(.text.AutoCalPllFactor))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = AutoCalPllFactor &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockWithHsiPLL
</UL>

<P><STRONG><a name="[8d]"></a>BOD_vExti9Config</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board.o(.text.BOD_vExti9Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BOD_vExti9Config &rArr; EXTI9_NVIC_Config &rArr; EXTI_LineConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_NVIC_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_NVIC_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Peripheral_Init
</UL>

<P><STRONG><a name="[90]"></a>BSP_vDirectionDetect_Init</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, board.o(.text.BSP_vDirectionDetect_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = BSP_vDirectionDetect_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Gpio_Init
</UL>

<P><STRONG><a name="[94]"></a>BSP_vExti9Config</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, board.o(.text.BSP_vExti9Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = BSP_vExti9Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Gpio_Init
</UL>

<P><STRONG><a name="[95]"></a>BSP_vUARTInit</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, board.o(.text.BSP_vUARTInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = BSP_vUARTInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Gpio_Init
</UL>

<P><STRONG><a name="[96]"></a>BSP_vUARTInitUART3</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, board.o(.text.BSP_vUARTInitUART3))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = BSP_vUARTInitUART3 &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Gpio_Init
</UL>

<P><STRONG><a name="[97]"></a>Board_ADC_Init</STRONG> (Thumb, 172 bytes, Stack size 104 bytes, board.o(.text.Board_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Board_ADC_Init &rArr; Drv_Adc_Channel_Init &rArr; ADC_RegularChannelConfig &rArr; ADC_TempSensorVrefintCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Adc_Inject_Channel_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Adc_Channel_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Adc_Basic_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Peripheral_Init
</UL>

<P><STRONG><a name="[9c]"></a>Board_Comp_Init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, board.o(.text.Board_Comp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Board_Comp_Init &rArr; Drv_Comp_Init &rArr; COMP_SetCrv
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Comp_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Peripheral_Init
</UL>

<P><STRONG><a name="[9e]"></a>Bsp_Adc_Init</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, board.o(.text.Bsp_Adc_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Bsp_Adc_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Gpio_Init
</UL>

<P><STRONG><a name="[9f]"></a>Bsp_Comp_Init</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, board.o(.text.Bsp_Comp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Bsp_Comp_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Gpio_Init
</UL>

<P><STRONG><a name="[a0]"></a>Bsp_Gpio_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, board.o(.text.Bsp_Gpio_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Bsp_Gpio_Init &rArr; Bsp_Pwm_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Pwm_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Op_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Comp_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Adc_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_vUARTInitUART3
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_vUARTInit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_vExti9Config
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_vDirectionDetect_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[a1]"></a>Bsp_Led_Init</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, board.o(.text.Bsp_Led_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Bsp_Led_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Gpio_Init
</UL>

<P><STRONG><a name="[a2]"></a>Bsp_Op_Init</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, board.o(.text.Bsp_Op_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Bsp_Op_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Gpio_Init
</UL>

<P><STRONG><a name="[a3]"></a>Bsp_Pwm_Init</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, board.o(.text.Bsp_Pwm_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Bsp_Pwm_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Gpio_Init
</UL>

<P><STRONG><a name="[a5]"></a>CBUart_Init</STRONG> (Thumb, 164 bytes, Stack size 64 bytes, uart_classb.o(.text.CBUart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = CBUart_Init &rArr; UART_Init &rArr; RCC_GetPCLK1Freq &rArr; RCC_GetHCLKFreq &rArr; RCC_GetSysClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Cmd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_UART_ClockCmd
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GPIO_ClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_B_startup
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[2e]"></a>COMP1_2_3_4_5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mm32_it.o(.text.COMP1_2_3_4_5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32spin0280_keil.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>COMP_Cmd</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, hal_comp.o(.text.COMP_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = COMP_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Comp_Init
</UL>

<P><STRONG><a name="[c6]"></a>COMP_DeInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hal_comp.o(.text.COMP_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = COMP_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Comp_Init
</UL>

<P><STRONG><a name="[c7]"></a>COMP_Init</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, hal_comp.o(.text.COMP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = COMP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Comp_Init
</UL>

<P><STRONG><a name="[c8]"></a>COMP_SetCrv</STRONG> (Thumb, 68 bytes, Stack size 36 bytes, hal_comp.o(.text.COMP_SetCrv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = COMP_SetCrv
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Comp_Init
</UL>

<P><STRONG><a name="[aa]"></a>COM_vCheckOverThresholdLimit</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, common.o(.text.COM_vCheckOverThresholdLimit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = COM_vCheckOverThresholdLimit &rArr; QMATH_max
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMATH_max
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDN_bEstimateStartupScenario
</UL>

<P><STRONG><a name="[13a]"></a>CRC_CalcBlockCRC</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, hal_crc.o(.text.CRC_CalcBlockCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CRC_CalcBlockCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_InitRunTimeChecks
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_B_CRC_StoreclassBData
</UL>

<P><STRONG><a name="[139]"></a>CRC_ResetDR</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_crc.o(.text.CRC_ResetDR))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_InitRunTimeChecks
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_FlashCrc32Init
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_B_FullFlash_test
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_B_CRC_StoreclassBData
</UL>

<P><STRONG><a name="[42]"></a>CUR_bCheckMotCurrentMeasValues</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, current.o(.text.CUR_bCheckMotCurrentMeasValues))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = CUR_bCheckMotCurrentMeasValues &rArr; CUR_vCheckMotCurrentMeasOffsetVoltage &rArr; FIR_vCalcFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STK_tGetSafeTime
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUR_vCheckMotCurrentMeasOffsetVoltage
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUR_vCalcCurrentQuantities
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsmonitor.o(.rodata.FSM_atMonitorConfig)
</UL>
<P><STRONG><a name="[120]"></a>CUR_tGetPhaseCurrentCalPointer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, current.o(.text.CUR_tGetPhaseCurrentCalPointer))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPL_vEvaluateStaticVector
</UL>

<P><STRONG><a name="[207]"></a>CUR_u16GetThreePhaseRMS</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, current.o(.text.CUR_u16GetThreePhaseRMS))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDN_bEstimateStartupScenario
</UL>

<P><STRONG><a name="[af]"></a>CUR_updatePhaseCurrentBuffer</STRONG> (Thumb, 452 bytes, Stack size 64 bytes, current.o(.text.CUR_updatePhaseCurrentBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = CUR_updatePhaseCurrentBuffer &rArr; Division
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Division
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPL_vPhaseLossEvaluation
</UL>

<P><STRONG><a name="[b1]"></a>CUR_vCalThreePhaseCurRMS</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, current.o(.text.CUR_vCalThreePhaseCurRMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CUR_vCalThreePhaseCurRMS &rArr; FIR_vCalcFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hw_Sqrt
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Division
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIR_vCalcFilter
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUR_vGetThreePhaseRawValue
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDN_bEstimateStartupScenario
</UL>

<P><STRONG><a name="[172]"></a>CUR_vCurRMSFilterInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, current.o(.text.CUR_vCurRMSFilterInit))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunReadyFast
</UL>

<P><STRONG><a name="[b8]"></a>CUR_vGetPhaseCurrentBufferSamples</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, current.o(.text.CUR_vGetPhaseCurrentBufferSamples))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CUR_vGetPhaseCurrentBufferSamples &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_vOpenPhaseCheckComplex
</UL>

<P><STRONG><a name="[124]"></a>CUR_vGetThreePhaseCur</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, current.o(.text.CUR_vGetThreePhaseCur))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CUR_vGetThreePhaseCur
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMR_vIndependentMotorModelCalculation
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRK_vcalcCurrentVector
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPL_vPhaselossprepareSamples
</UL>

<P><STRONG><a name="[b2]"></a>CUR_vGetThreePhaseRawValue</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, current.o(.text.CUR_vGetThreePhaseRawValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CUR_vGetThreePhaseRawValue
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUR_vCalThreePhaseCurRMS
</UL>

<P><STRONG><a name="[82]"></a>CUR_vSetOffsetMeasState</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, current.o(.text.CUR_vSetOffsetMeasState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CUR_vSetOffsetMeasState
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_IRQHandler
</UL>

<P><STRONG><a name="[1f]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mm32_it.o(.text.DMA1_Channel1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32spin0280_keil.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mm32_it.o(.text.DMA1_Channel2_3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32spin0280_keil.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Channel4_5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mm32_it.o(.text.DMA1_Channel4_5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32spin0280_keil.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>DcBus_Ripple_suppress</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, foc_pmsm.o(.text.DcBus_Ripple_suppress))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = DcBus_Ripple_suppress &rArr; Division
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Division
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Current_Controller
</UL>

<P><STRONG><a name="[b0]"></a>Division</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, drv_div.o(.text.Division))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Division
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCN_vGetPhaseVoltage
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUR_vCalThreePhaseCurRMS
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DcBus_Ripple_suppress
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRK_vcalcVoltageVector
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRK_vcalcCurrentVector
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRK_vcalcBemf
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPL_vPhaselossprepareSamples
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUR_updatePhaseCurrentBuffer
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTE_vCalculateTemperature
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTE_vCalculateNTCTemperature
</UL>

<P><STRONG><a name="[98]"></a>Drv_Adc_Basic_Init</STRONG> (Thumb, 148 bytes, Stack size 64 bytes, drv_adc.o(.text.Drv_Adc_Basic_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Drv_Adc_Basic_Init &rArr; ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ExternalTrigConvCmd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_ADC_Init
</UL>

<P><STRONG><a name="[99]"></a>Drv_Adc_Channel_Init</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, drv_adc.o(.text.Drv_Adc_Channel_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Drv_Adc_Channel_Init &rArr; ADC_RegularChannelConfig &rArr; ADC_TempSensorVrefintCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ANY_NUM_Config
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ANY_Cmd
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ANY_CH_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_ADC_Init
</UL>

<P><STRONG><a name="[9a]"></a>Drv_Adc_Inject_Channel_Init</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, drv_adc.o(.text.Drv_Adc_Inject_Channel_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Drv_Adc_Inject_Channel_Init &rArr; ADC_RegularChannelConfig &rArr; ADC_TempSensorVrefintCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_InjectedSequencerLengthConfig
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_InjectedSequencerChannelConfig
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_InjectedConvCmd
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AutoInjectedConvCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_ADC_Init
</UL>

<P><STRONG><a name="[9d]"></a>Drv_Comp_Init</STRONG> (Thumb, 128 bytes, Stack size 72 bytes, drv_comp.o(.text.Drv_Comp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Drv_Comp_Init &rArr; COMP_SetCrv
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMP_SetCrv
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMP_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMP_DeInit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMP_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Comp_Init
</UL>

<P><STRONG><a name="[ca]"></a>Drv_Hwdiv_Init</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, drv_div.o(.text.Drv_Hwdiv_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Drv_Hwdiv_Init &rArr; RCC_AHBPeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDIV_SignInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Peripheral_Init
</UL>

<P><STRONG><a name="[cc]"></a>Drv_Iwdg_Init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, drv_iwdg.o(.text.Drv_Iwdg_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Drv_Iwdg_Init &rArr; IWDG_SetReload &rArr; RVU_CheckStatus &rArr; IWDG_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVU_CheckStatus
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSICmd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVU_CheckStatus
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Peripheral_Init
</UL>

<P><STRONG><a name="[d6]"></a>Drv_Opamp_Init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, drv_opamp.o(.text.Drv_Opamp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Drv_Opamp_Init &rArr; RCC_APB2PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPAMP_Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Peripheral_Init
</UL>

<P><STRONG><a name="[d8]"></a>Drv_Pwm_Init</STRONG> (Thumb, 296 bytes, Stack size 112 bytes, drv_pwm.o(.text.Drv_Pwm_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Drv_Pwm_Init &rArr; TIM_OC4Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_BDTRConfig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Peripheral_Init
</UL>

<P><STRONG><a name="[e5]"></a>Drv_Sqrt_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, drv_sqrt.o(.text.Drv_Sqrt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Drv_Sqrt_Init &rArr; RCC_AHBPeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Peripheral_Init
</UL>

<P><STRONG><a name="[e6]"></a>Drv_Tim16_Counter_Init</STRONG> (Thumb, 112 bytes, Stack size 72 bytes, drv_counter.o(.text.Drv_Tim16_Counter_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Drv_Tim16_Counter_Init &rArr; TIM_DeInit &rArr; exRCC_APB1PeriphReset
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseStructInit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OCStructInit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_vSetSystickTimerRegisters
</UL>

<P><STRONG><a name="[ea]"></a>Drv_u32GetTim16CountVal</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, drv_counter.o(.text.Drv_u32GetTim16CountVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Drv_u32GetTim16CountVal &rArr; TIM_GetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_u32GetSystickTimerCounter
</UL>

<P><STRONG><a name="[ec]"></a>Drv_vSetOutputFreq</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, drv_output.o(.text.Drv_vSetOutputFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Drv_vSetOutputFreq &rArr; TIM_SetAutoreload
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetAutoreload
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vCalculateActualSpeedFromPU
</UL>

<P><STRONG><a name="[ee]"></a>EEPROM_Read</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, drv_eep.o(.text.EEPROM_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = EEPROM_Read &rArr; FLASH_SIM_WriteLocate &rArr; FLASH_SIM_FindEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SIM_WriteLocate
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_vReadWordN
</UL>

<P><STRONG><a name="[f1]"></a>EEPROM_Write</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, drv_eep.o(.text.EEPROM_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = EEPROM_Write &rArr; FLASH_SIM_WriteEE &rArr; FLASH_SIM_ProgramEE &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation &rArr; FLASH_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SIM_WriteEE
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_vWriteWordN
</UL>

<P><STRONG><a name="[162]"></a>ERT_tGetErrorCode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, errorreact.o(.text.ERT_tGetErrorCode))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_Init_Fast
</UL>

<P><STRONG><a name="[f3]"></a>ERT_vErrorCodeAccess</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, errorreact.o(.text.ERT_vErrorCodeAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ERT_vErrorCodeAccess &rArr; SMP_vWriteWordN &rArr; EEPROM_Write &rArr; FLASH_SIM_WriteEE &rArr; FLASH_SIM_ProgramEE &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation &rArr; FLASH_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_vWriteWordN
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_vReadWordN
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[161]"></a>ERT_vErrorLEDDisplay</STRONG> (Thumb, 256 bytes, Stack size 8 bytes, errorreact.o(.text.ERT_vErrorLEDDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ERT_vErrorLEDDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_Fault_Slow
</UL>

<P><STRONG><a name="[f6]"></a>ERT_vErrorReaction</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, errorreact.o(.text.ERT_vErrorReaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ERT_vErrorReaction &rArr; M1_SwitchForceFault &rArr; variable_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_SwitchForceFault
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERT_vErrorReport
</UL>

<P><STRONG><a name="[f8]"></a>ERT_vErrorReactionRecovery</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, errorreact.o(.text.ERT_vErrorReactionRecovery))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ERT_vErrorReactionRecovery &rArr; M1_SwitchForceToStop &rArr; variable_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_SwitchForceToStop
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERT_vResetErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_Fault_Slow
</UL>

<P><STRONG><a name="[fb]"></a>ERT_vErrorReport</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, errorreact.o(.text.ERT_vErrorReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ERT_vErrorReport &rArr; ERT_vErrorReaction &rArr; M1_SwitchForceFault &rArr; variable_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERT_vSetErrorCode
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERT_vErrorReaction
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STK_vTriggerSafeTime
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunStartupSlow
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_FaultDetection
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMR_vCheckSpeedMonitorImplement
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRK_vCheckMotorLockComplex
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_vOpenPhaseCheckComplex
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOL_vCheckInternalReferenceVoltageCondition
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOL_vCheck15VVoltageCondition
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTE_vEvaluationTemperature
</UL>

<P><STRONG><a name="[f9]"></a>ERT_vResetErrorCode</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, errorreact.o(.text.ERT_vResetErrorCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ERT_vResetErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERT_vErrorReactionRecovery
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_FaultDetection
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOL_vCheckInternalReferenceVoltageCondition
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOL_vCheck15VVoltageCondition
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTE_vEvaluationTemperature
</UL>

<P><STRONG><a name="[16e]"></a>ERT_vResetErrorCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, errorreact.o(.text.ERT_vResetErrorCount))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunFreewheelFast
</UL>

<P><STRONG><a name="[fc]"></a>ERT_vSetErrorCode</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, errorreact.o(.text.ERT_vSetErrorCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ERT_vSetErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERT_vErrorReport
</UL>

<P><STRONG><a name="[1b]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mm32_it.o(.text.EXTI0_1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32spin0280_keil.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mm32_it.o(.text.EXTI2_3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32spin0280_keil.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mm32_it.o(.text.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI4_15_IRQHandler &rArr; EXTI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetFlagStatus
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32spin0280_keil.o(RESET)
</UL>
<P><STRONG><a name="[fe]"></a>EXTI_ClearFlag</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hal_exti.o(.text.EXTI_ClearFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[fd]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, hal_exti.o(.text.EXTI_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[100]"></a>EXTI_Init</STRONG> (Thumb, 244 bytes, Stack size 8 bytes, hal_exti.o(.text.EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_NVIC_Config
</UL>

<P><STRONG><a name="[ff]"></a>EXTI_LineConfig</STRONG> (Thumb, 84 bytes, Stack size 44 bytes, hal_exti.o(.text.EXTI_LineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = EXTI_LineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_NVIC_Config
</UL>

<P><STRONG><a name="[102]"></a>FCK_vInitSafeTime</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fsclock.o(.text.FCK_vInitSafeTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = FCK_vInitSafeTime &rArr; FMC_vSetSystickTimerRegisters &rArr; Drv_Tim16_Counter_Init &rArr; TIM_DeInit &rArr; exRCC_APB1PeriphReset
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_vSetSystickTimerRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[104]"></a>FCN_vGetPhaseVoltage</STRONG> (Thumb, 228 bytes, Stack size 56 bytes, fscommon.o(.text.FCN_vGetPhaseVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FCN_vGetPhaseVoltage &rArr; MLIB_Mul_Q15
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Division
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLIB_Mul_Q15
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOL_tGetDclVolRawSampleQ
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FHE_vHandleTask
</UL>

<P><STRONG><a name="[125]"></a>FCN_vGetThreePhaseVol</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fscommon.o(.text.FCN_vGetThreePhaseVol))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FCN_vGetThreePhaseVol
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMR_vIndependentMotorModelCalculation
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRK_vcalcVoltageVector
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPL_vPhaselossprepareSamples
</UL>

<P><STRONG><a name="[107]"></a>FHE_vFunctionSafetyCheck</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fshandle.o(.text.FHE_vFunctionSafetyCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = FHE_vFunctionSafetyCheck &rArr; FRK_vCheckMotorLock &rArr; FRK_vCheckMotorLockComplex &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMR_vCheckSpeedMonitor
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRK_vCheckMotorLock
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPL_vPhaseLossCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[84]"></a>FHE_vHandleTask</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, fshandle.o(.text.FHE_vHandleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = FHE_vHandleTask &rArr; SMR_vSpeedEvaluation &rArr; SMR_vSpeedEvaluationComplex &rArr; SMR_vIndependentMotorModelCalculation &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMR_vSpeedEvaluation
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRK_vLockedRotorEvaluation
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPL_vPhaseLossEvaluation
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCN_vGetPhaseVoltage
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_IRQHandler
</UL>

<P><STRONG><a name="[b4]"></a>FIR_vCalcFilter</STRONG> (Thumb, 68 bytes, Stack size 28 bytes, filter.o(.text.FIR_vCalcFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FIR_vCalcFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUR_vCalThreePhaseCurRMS
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMR_vIndependentMotorModelCalculation
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOL_vCalcVolLowPassFilters
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUR_vCheckMotCurrentMeasOffsetVoltage
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUR_vCalcCurrentQuantities
</UL>

<P><STRONG><a name="[1fe]"></a>FIR_vInitFilterOutput</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, filter.o(.text.FIR_vInitFilterOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FIR_vInitFilterOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOL_bInitDcLinkVoltageMeasurement
</UL>

<P><STRONG><a name="[10e]"></a>FLASH_ErasePage</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hal_flash.o(.text.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation &rArr; FLASH_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SIM_EraseEE
</UL>

<P><STRONG><a name="[116]"></a>FLASH_GetStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, hal_flash.o(.text.FLASH_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[19]"></a>FLASH_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mm32_it.o(.text.FLASH_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32spin0280_keil.o(RESET)
</UL>
<P><STRONG><a name="[113]"></a>FLASH_Lock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_flash.o(.text.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SIM_ProgramEE
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SIM_EraseEE
</UL>

<P><STRONG><a name="[110]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, hal_flash.o(.text.FLASH_ProgramHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation &rArr; FLASH_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SIM_ProgramEE
</UL>

<P><STRONG><a name="[ef]"></a>FLASH_SIM_WriteLocate</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, drv_eep.o(.text.FLASH_SIM_WriteLocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = FLASH_SIM_WriteLocate &rArr; FLASH_SIM_FindEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SIM_FindEmpty
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SIM_WriteEE
</UL>

<P><STRONG><a name="[112]"></a>FLASH_Unlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_flash.o(.text.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SIM_ProgramEE
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SIM_EraseEE
</UL>

<P><STRONG><a name="[10f]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, hal_flash.o(.text.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FLASH_WaitForLastOperation &rArr; FLASH_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[80]"></a>FMC_u32GetSystickTimerCounter</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fsmcu.o(.text.FMC_u32GetSystickTimerCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FMC_u32GetSystickTimerCounter &rArr; Drv_u32GetTim16CountVal &rArr; TIM_GetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_u32GetTim16CountVal
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STK_vTriggerSafeTime
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_IRQHandler
</UL>

<P><STRONG><a name="[103]"></a>FMC_vSetSystickTimerRegisters</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsmcu.o(.text.FMC_vSetSystickTimerRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = FMC_vSetSystickTimerRegisters &rArr; Drv_Tim16_Counter_Init &rArr; TIM_DeInit &rArr; exRCC_APB1PeriphReset
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Tim16_Counter_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCK_vInitSafeTime
</UL>

<P><STRONG><a name="[117]"></a>FOC_Current_Controller</STRONG> (Thumb, 332 bytes, Stack size 72 bytes, foc_pmsm.o(.text.FOC_Current_Controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = FOC_Current_Controller &rArr; DcBus_Ripple_suppress &rArr; Division
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLIB_SinCos
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLIB_PIControl_Q15
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hw_Sqrt
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DcBus_Ripple_suppress
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLIB_Neg_Q15
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLIB_Mul_Q15
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCFLIB_Park_S16
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCFLIB_InvPark_S16
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunStartupFast
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunSpinFast
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunAlignFast
</UL>

<P><STRONG><a name="[10a]"></a>FPL_vPhaseLossCheck</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fsphaseloss.o(.text.FPL_vPhaseLossCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = FPL_vPhaseLossCheck &rArr; RMP_vOpenPhaseCheckComplex &rArr; FPL_vEvaluateCurrentAsymmetry &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_vOpenPhaseCheckComplex
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FHE_vFunctionSafetyCheck
</UL>

<P><STRONG><a name="[10d]"></a>FPL_vPhaseLossEvaluation</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, fsphaseloss.o(.text.FPL_vPhaseLossEvaluation))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = FPL_vPhaseLossEvaluation &rArr; CUR_updatePhaseCurrentBuffer &rArr; Division
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPL_vPhaselossprepareSamples
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUR_updatePhaseCurrentBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FHE_vHandleTask
</UL>

<P><STRONG><a name="[123]"></a>FPL_vPhaselossprepareSamples</STRONG> (Thumb, 384 bytes, Stack size 56 bytes, fsphaseloss.o(.text.FPL_vPhaselossprepareSamples))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = FPL_vPhaselossprepareSamples &rArr; Division
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Division
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCN_vGetThreePhaseVol
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUR_vGetThreePhaseCur
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPL_vPhaseLossEvaluation
</UL>

<P><STRONG><a name="[b6]"></a>FPM_ulSqrt</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, math.o(.text.FPM_ulSqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FPM_ulSqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUR_vCalcCurrentQuantities
</UL>

<P><STRONG><a name="[1cb]"></a>FPM_vCart2Pol</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, math.o(.text.FPM_vCart2Pol))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FPM_vCart2Pol
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMR_vIndependentMotorModelCalculation
</UL>

<P><STRONG><a name="[109]"></a>FRK_vCheckMotorLock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fsrotorlock.o(.text.FRK_vCheckMotorLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = FRK_vCheckMotorLock &rArr; FRK_vCheckMotorLockComplex &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRK_vCheckMotorLockComplex
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FHE_vFunctionSafetyCheck
</UL>

<P><STRONG><a name="[126]"></a>FRK_vCheckMotorLockComplex</STRONG> (Thumb, 392 bytes, Stack size 56 bytes, fsrotorlock.o(.text.FRK_vCheckMotorLockComplex))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = FRK_vCheckMotorLockComplex &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STK_tGetSafeTime
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERT_vErrorReport
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRK_vCheckMotorLock
</UL>

<P><STRONG><a name="[10c]"></a>FRK_vLockedRotorEvaluation</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fsrotorlock.o(.text.FRK_vLockedRotorEvaluation))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = FRK_vLockedRotorEvaluation &rArr; FRK_vcalcBemf &rArr; FRK_vcalcVoltageVector &rArr; Division
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRK_vcalcBemf
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FHE_vHandleTask
</UL>

<P><STRONG><a name="[127]"></a>FRK_vcalcBemf</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, fsrotorlock.o(.text.FRK_vcalcBemf))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = FRK_vcalcBemf &rArr; FRK_vcalcVoltageVector &rArr; Division
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Division
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRK_vcalcVoltageVector
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRK_vcalcCurrentVector
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLIB_Mul_Q15
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRK_vLockedRotorEvaluation
</UL>

<P><STRONG><a name="[128]"></a>FRK_vcalcCurrentVector</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, fsrotorlock.o(.text.FRK_vcalcCurrentVector))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = FRK_vcalcCurrentVector &rArr; Division
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Division
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUR_vGetThreePhaseCur
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRK_vcalcBemf
</UL>

<P><STRONG><a name="[129]"></a>FRK_vcalcVoltageVector</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, fsrotorlock.o(.text.FRK_vcalcVoltageVector))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = FRK_vcalcVoltageVector &rArr; Division
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Division
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCN_vGetThreePhaseVol
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRK_vcalcBemf
</UL>

<P><STRONG><a name="[12b]"></a>FSM_ucHandleTask</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, fsmonitor.o(.text.FSM_ucHandleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FSM_ucHandleTask &rArr; FSM_vHandleMonitors
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STK_tGetSafeTime
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSM_vHandleMonitors
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSM_bInitMonitors
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[8a]"></a>FSM_vActionPerfrom</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, statemachinecom.o(.text.FSM_vActionPerfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FSM_vActionPerfrom &rArr; FSM_vGetAction
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSM_vGetAction
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMS_vModbus2StatemachineRun
</UL>

<P><STRONG><a name="[12e]"></a>FSM_vGetAction</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, statemachinecom.o(.text.FSM_vGetAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FSM_vGetAction
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSM_vActionPerfrom
</UL>

<P><STRONG><a name="[89]"></a>FSM_vInit</STRONG> (Thumb, 90 bytes, Stack size 64 bytes, statemachinecom.o(.text.FSM_vInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FSM_vInit
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMS_vInitModbus2Stm
</UL>

<P><STRONG><a name="[18b]"></a>FSM_vStateTransfer</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, statemachinecom.o(.text.FSM_vStateTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FSM_vStateTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS2_vTrans_do
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS2_vRecep_do
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS2_vInit_do
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS2_vIdle_do
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS2_vError_do
</UL>

<P><STRONG><a name="[134]"></a>FTE_bDataFilter</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, fstemperature.o(.text.FTE_bDataFilter))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTE_vTemperatureCal
</UL>

<P><STRONG><a name="[12f]"></a>FTE_vCalculateNTCTemperature</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, fstemperature.o(.text.FTE_vCalculateNTCTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = FTE_vCalculateNTCTemperature &rArr; Division
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Division
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTE_vTemperatureCal
</UL>

<P><STRONG><a name="[130]"></a>FTE_vCalculateTemperature</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, fstemperature.o(.text.FTE_vCalculateTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FTE_vCalculateTemperature &rArr; Division
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Division
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTE_vTemperatureCal
</UL>

<P><STRONG><a name="[131]"></a>FTE_vEvaluationTemperature</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, fstemperature.o(.text.FTE_vEvaluationTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FTE_vEvaluationTemperature &rArr; ERT_vErrorReport &rArr; ERT_vErrorReaction &rArr; M1_SwitchForceFault &rArr; variable_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERT_vResetErrorCode
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERT_vErrorReport
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTE_vTemperatureCal
</UL>

<P><STRONG><a name="[133]"></a>FTE_vTemperatueInit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fstemperature.o(.text.FTE_vTemperatueInit))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTE_vTemperatureCal
</UL>

<P><STRONG><a name="[132]"></a>FTE_vTemperatureCal</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, fstemperature.o(.text.FTE_vTemperatureCal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FTE_vTemperatureCal &rArr; FTE_vEvaluationTemperature &rArr; ERT_vErrorReport &rArr; ERT_vErrorReaction &rArr; M1_SwitchForceFault &rArr; variable_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTE_vTemperatueInit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTE_vEvaluationTemperature
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTE_vCalculateTemperature
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTE_vCalculateNTCTemperature
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTE_bDataFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSE_vRegisterHandler
</UL>

<P><STRONG><a name="[66]"></a>FailSafePOR</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, iec60730_b_aux.o(.text.FailSafePOR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FailSafePOR &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_InitRunTimeChecks
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_DoRunTimeChecks
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_ClockTest_RunTime
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_B_RunTimeCPUTest
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_B_FlashRunTime_test
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_ClockTest_Startup
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_B_startup
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_B_StartUpCPUTest
</UL>

<P><STRONG><a name="[136]"></a>Flashtest_config</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, iec60730_b_startup.o(.text.Flashtest_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Flashtest_config &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_InitRunTimeChecks
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_B_startup
</UL>

<P><STRONG><a name="[93]"></a>GPIO_Init</STRONG> (Thumb, 280 bytes, Stack size 36 bytes, hal_gpio.o(.text.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Pwm_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Op_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Comp_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Adc_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_vUARTInitUART3
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_vUARTInit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_vExti9Config
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_vDirectionDetect_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUart_Init
</UL>

<P><STRONG><a name="[a4]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 94 bytes, Stack size 52 bytes, hal_gpio.o(.text.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Pwm_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUart_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vCONSOLE_InitUART3
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vCONSOLE_Init
</UL>

<P><STRONG><a name="[1b9]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, hal_gpio.o(.text.GPIO_ReadInputDataBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vMotorDirectionCheck
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vCalcualteTargetSpeed
</UL>

<P><STRONG><a name="[91]"></a>GPIO_StructInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hal_gpio.o(.text.GPIO_StructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_StructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Pwm_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Op_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Comp_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Adc_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_vUARTInitUART3
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_vUARTInit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_vExti9Config
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_vDirectionDetect_Init
</UL>

<P><STRONG><a name="[83]"></a>Get_ADC_Result</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, foc_pmsm.o(.text.Get_ADC_Result))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Get_ADC_Result
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOL_tReadVoltageValue
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_IRQHandler
</UL>

<P><STRONG><a name="[1e]"></a>HWDIV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mm32_it.o(.text.HWDIV_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32spin0280_keil.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>Hw_Sqrt</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, drv_sqrt.o(.text.Hw_Sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Hw_Sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUR_vCalThreePhaseCurRMS
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Current_Controller
</UL>

<P><STRONG><a name="[2d]"></a>I2C1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mm32_it.o(.text.I2C1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32spin0280_keil.o(RESET)
</UL>
<P><STRONG><a name="[138]"></a>IEC60730_B_CRC_StoreclassBData</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, iec60730_b_startup.o(.text.IEC60730_B_CRC_StoreclassBData))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = IEC60730_B_CRC_StoreclassBData &rArr; CRC_CalcBlockCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_ResetDR
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_CalcBlockCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_B_startup
</UL>

<P><STRONG><a name="[13b]"></a>IEC60730_B_CpuRunTime_test</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, iec60730_b_runtimetest.o(.text.IEC60730_B_CpuRunTime_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = IEC60730_B_CpuRunTime_test &rArr; IEC60730_B_RunTimeCPUTest &rArr; FailSafePOR &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_B_RunTimeCPUTest
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_DoRunTimeChecks
</UL>

<P><STRONG><a name="[13c]"></a>IEC60730_B_FlashRunTime_test</STRONG> (Thumb, 392 bytes, Stack size 32 bytes, iec60730_b_runtimetest.o(.text.IEC60730_B_FlashRunTime_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = IEC60730_B_FlashRunTime_test &rArr; FailSafePOR &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailSafePOR
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_DoRunTimeChecks
</UL>

<P><STRONG><a name="[13d]"></a>IEC60730_B_FullCpu_test</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, iec60730_b_startup.o(.text.IEC60730_B_FullCpu_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = IEC60730_B_FullCpu_test &rArr; IEC60730_B_StartUpCPUTest &rArr; FailSafePOR &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_B_StartUpCPUTest
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_B_startup
</UL>

<P><STRONG><a name="[3b]"></a>IEC60730_B_FullFlash_test</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, iec60730_b_flashtest.o(.text.IEC60730_B_FullFlash_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IEC60730_B_FullFlash_test &rArr; RCC_AHBPeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_ResetDR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iec60730_b_startup.o(.text.Flashtest_config)
</UL>
<P><STRONG><a name="[13e]"></a>IEC60730_B_TranspMarch</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, iec60730_b_transpram.o(.text.IEC60730_B_TranspMarch))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = IEC60730_B_TranspMarch
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_B_TranspRamMarchCXStep
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[140]"></a>IEC60730_B_TranspMarchInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, iec60730_b_transpram.o(.text.IEC60730_B_TranspMarchInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IEC60730_B_TranspMarchInit
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ramtest_config
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_InitRunTimeChecks
</UL>

<P><STRONG><a name="[142]"></a>IEC60730_B_WDGSelfTest</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, iec60730_b_aux.o(.text.IEC60730_B_WDGSelfTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IEC60730_B_WDGSelfTest &rArr; Iwdg_Init &rArr; IWDG_SetPrescaler &rArr; PVU_CheckStatus &rArr; IWDG_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iwdg_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_B_startup
</UL>

<P><STRONG><a name="[7e]"></a>IEC60730_B_startup</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, iec60730_b_startup.o(.text.IEC60730_B_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = IEC60730_B_startup &rArr; IEC60730_ClockTest_Startup &rArr; IEC60730_ClockStartUpTest &rArr; IEC60730_InitClock_Xcross_Measurement &rArr; Tim2_Init &rArr; TIM_ICInit &rArr; TI4_Configure
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUart_Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flashtest_config
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_B_WDGSelfTest
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailSafePOR
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_flow_check_point
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ramtest_config
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_ClockTest_Startup
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_B_FullRamMarchC
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_B_FullCpu_test
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_B_CRC_StoreclassBData
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[156]"></a>IEC60730_CheckStack</STRONG> (Thumb, 140 bytes, Stack size 4 bytes, iec60730_b_runtimetest.o(.text.IEC60730_CheckStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IEC60730_CheckStack
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_Stack_Check
</UL>

<P><STRONG><a name="[149]"></a>IEC60730_ClockStartUpTest</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, iec60730_b_clocktest.o(.text.IEC60730_ClockStartUpTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = IEC60730_ClockStartUpTest &rArr; IEC60730_InitClock_Xcross_Measurement &rArr; Tim2_Init &rArr; TIM_ICInit &rArr; TI4_Configure
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_InitClock_Xcross_Measurement
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_ClockTest_Startup
</UL>

<P><STRONG><a name="[14b]"></a>IEC60730_ClockTest_RunTime</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, iec60730_b_runtimetest.o(.text.IEC60730_ClockTest_RunTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = IEC60730_ClockTest_RunTime &rArr; FailSafePOR &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_MainClockTest
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailSafePOR
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_DoRunTimeChecks
</UL>

<P><STRONG><a name="[148]"></a>IEC60730_ClockTest_Startup</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, iec60730_b_startup.o(.text.IEC60730_ClockTest_Startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = IEC60730_ClockTest_Startup &rArr; IEC60730_ClockStartUpTest &rArr; IEC60730_InitClock_Xcross_Measurement &rArr; Tim2_Init &rArr; TIM_ICInit &rArr; TI4_Configure
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_ClockStartUpTest
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailSafePOR
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_B_startup
</UL>

<P><STRONG><a name="[14d]"></a>IEC60730_DoRunTimeChecks</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, iec60730_b_runtimetest.o(.text.IEC60730_DoRunTimeChecks))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = IEC60730_DoRunTimeChecks &rArr; IEC60730_B_FlashRunTime_test &rArr; FailSafePOR &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_Stack_Check
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_ClockTest_RunTime
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_B_FlashRunTime_test
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_B_CpuRunTime_test
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailSafePOR
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[14f]"></a>IEC60730_FlashCrc32Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, iec60730_b_flashtest.o(.text.IEC60730_FlashCrc32Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IEC60730_FlashCrc32Init
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_ResetDR
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_InitRunTimeChecks
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_crc32Run
</UL>

<P><STRONG><a name="[14a]"></a>IEC60730_InitClock_Xcross_Measurement</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, iec60730_b_clocktest.o(.text.IEC60730_InitClock_Xcross_Measurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = IEC60730_InitClock_Xcross_Measurement &rArr; Tim2_Init &rArr; TIM_ICInit &rArr; TI4_Configure
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_ClockStartUpTest
</UL>

<P><STRONG><a name="[153]"></a>IEC60730_InitRunTimeChecks</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, iec60730_b_runtimetest.o(.text.IEC60730_InitRunTimeChecks))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = IEC60730_InitRunTimeChecks &rArr; FailSafePOR &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_ResetDR
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_CalcBlockCRC
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_FlashCrc32Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_B_TranspMarchInit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flashtest_config
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailSafePOR
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[14c]"></a>IEC60730_MainClockTest</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, iec60730_b_clocktest.o(.text.IEC60730_MainClockTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IEC60730_MainClockTest &rArr; IEC60730_clockrun_valuecheck
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_clockrun_valuecheck
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_ClockTest_RunTime
</UL>

<P><STRONG><a name="[14e]"></a>IEC60730_Stack_Check</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, iec60730_b_runtimetest.o(.text.IEC60730_Stack_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IEC60730_Stack_Check &rArr; IEC60730_CheckStack
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_CheckStack
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_DoRunTimeChecks
</UL>

<P><STRONG><a name="[155]"></a>IEC60730_clockrun_valuecheck</STRONG> (Thumb, 88 bytes, Stack size 4 bytes, iec60730_b_clocktest.o(.text.IEC60730_clockrun_valuecheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IEC60730_clockrun_valuecheck
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_MainClockTest
</UL>

<P><STRONG><a name="[3c]"></a>IEC60730_crc32Run</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, iec60730_b_flashtest.o(.text.IEC60730_crc32Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IEC60730_crc32Run &rArr; IEC60730_FlashCrc32Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_FlashCrc32Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iec60730_b_runtimetest.o(.text.IEC60730_InitRunTimeChecks)
</UL>
<P><STRONG><a name="[d5]"></a>IWDG_Enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_iwdg.o(.text.IWDG_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Iwdg_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iwdg_Init
</UL>

<P><STRONG><a name="[1b0]"></a>IWDG_GetFlagStatus</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, hal_iwdg.o(.text.IWDG_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IWDG_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVU_CheckStatus
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVU_CheckStatus
</UL>

<P><STRONG><a name="[d4]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_iwdg.o(.text.IWDG_ReloadCounter))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Iwdg_Init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDG_Refresh
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iwdg_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailSafePOR
</UL>

<P><STRONG><a name="[d1]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, hal_iwdg.o(.text.IWDG_SetPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IWDG_SetPrescaler &rArr; PVU_CheckStatus &rArr; IWDG_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVU_CheckStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Iwdg_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iwdg_Init
</UL>

<P><STRONG><a name="[d3]"></a>IWDG_SetReload</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, hal_iwdg.o(.text.IWDG_SetReload))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IWDG_SetReload &rArr; RVU_CheckStatus &rArr; IWDG_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVU_CheckStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Iwdg_Init
</UL>

<P><STRONG><a name="[d0]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hal_iwdg.o(.text.IWDG_WriteAccessCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IWDG_WriteAccessCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Iwdg_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iwdg_Init
</UL>

<P><STRONG><a name="[157]"></a>Init_Parameter</STRONG> (Thumb, 640 bytes, Stack size 72 bytes, user_function.o(.text.Init_Parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Init_Parameter &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLIB_Neg_Q15
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[159]"></a>Interrupt_Init</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, mm32_it.o(.text.Interrupt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Interrupt_Init &rArr; NVIC_Configure &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configure
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ITConfig
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearITPendingBit
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[143]"></a>Iwdg_Init</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, iec60730_b_aux.o(.text.Iwdg_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Iwdg_Init &rArr; IWDG_SetPrescaler &rArr; PVU_CheckStatus &rArr; IWDG_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVU_CheckStatus
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSICmd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVU_CheckStatus
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDG_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_B_WDGSelfTest
</UL>

<P><STRONG><a name="[55]"></a>M1_Fault_Fast</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, statemachine.o(.text.M1_Fault_Fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = M1_Fault_Fast &rArr; M1_FaultDetection &rArr; ERT_vErrorReport &rArr; ERT_vErrorReaction &rArr; M1_SwitchForceFault &rArr; variable_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_FaultDetection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statemachine.o(.rodata.s_STATE_FAST)
</UL>
<P><STRONG><a name="[59]"></a>M1_Fault_Slow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, statemachine.o(.text.M1_Fault_Slow))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = M1_Fault_Slow &rArr; Var_Filt &rArr; MLIB_FilterMA_Q15 &rArr; MLIB_SubSat_Q31
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Var_Filt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERT_vErrorReactionRecovery
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERT_vErrorLEDDisplay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statemachine.o(.rodata.s_STATE_SLOW)
</UL>
<P><STRONG><a name="[56]"></a>M1_Init_Fast</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, statemachine.o(.text.M1_Init_Fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = M1_Init_Fast &rArr; variable_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;variable_reset
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERT_tGetErrorCode
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_SwitchInitStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statemachine.o(.rodata.s_STATE_FAST)
</UL>
<P><STRONG><a name="[5a]"></a>M1_Init_Slow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, statemachine.o(.text.M1_Init_Slow))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = M1_Init_Slow &rArr; Var_Filt &rArr; MLIB_FilterMA_Q15 &rArr; MLIB_SubSat_Q31
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Var_Filt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statemachine.o(.rodata.s_STATE_SLOW)
</UL>
<P><STRONG><a name="[58]"></a>M1_Run_Fast</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, statemachine.o(.text.M1_Run_Fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = M1_Run_Fast &rArr; M1_FaultDetection &rArr; ERT_vErrorReport &rArr; ERT_vErrorReaction &rArr; M1_SwitchForceFault &rArr; variable_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_FaultDetection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statemachine.o(.rodata.s_STATE_FAST)
</UL>
<P><STRONG><a name="[5c]"></a>M1_Run_Slow</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, statemachine.o(.text.M1_Run_Slow))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = M1_Run_Slow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statemachine.o(.rodata.s_STATE_SLOW)
</UL>
<P><STRONG><a name="[57]"></a>M1_Stop_Fast</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, statemachine.o(.text.M1_Stop_Fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = M1_Stop_Fast &rArr; M1_FaultDetection &rArr; ERT_vErrorReport &rArr; ERT_vErrorReaction &rArr; M1_SwitchForceFault &rArr; variable_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_FaultDetection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statemachine.o(.rodata.s_STATE_FAST)
</UL>
<P><STRONG><a name="[5b]"></a>M1_Stop_Slow</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, statemachine.o(.text.M1_Stop_Slow))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = M1_Stop_Slow &rArr; Var_Filt &rArr; MLIB_FilterMA_Q15 &rArr; MLIB_SubSat_Q31
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Var_Filt
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_SwitchStopRun
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statemachine.o(.rodata.s_STATE_SLOW)
</UL>
<P><STRONG><a name="[f7]"></a>M1_SwitchForceFault</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, statemachine.o(.text.M1_SwitchForceFault))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = M1_SwitchForceFault &rArr; variable_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;variable_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERT_vErrorReaction
</UL>

<P><STRONG><a name="[fa]"></a>M1_SwitchForceToStop</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, statemachine.o(.text.M1_SwitchForceToStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = M1_SwitchForceToStop &rArr; variable_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;variable_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERT_vErrorReactionRecovery
</UL>

<P><STRONG><a name="[171]"></a>M1_SwitchRunReadyWindDet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, statemachine.o(.text.M1_SwitchRunReadyWindDet))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunReadyFast
</UL>

<P><STRONG><a name="[16c]"></a>M1_SwitchRunWindDetAlign</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, statemachine.o(.text.M1_SwitchRunWindDetAlign))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunWindDetSlow
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunBrakeFast
</UL>

<P><STRONG><a name="[17e]"></a>M1_SwitchRunWindDetReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, statemachine.o(.text.M1_SwitchRunWindDetReady))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunWindDetSlow
</UL>

<P><STRONG><a name="[1c5]"></a>MIT_ptGetCaptureData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mm32_it.o(.text.MIT_ptGetCaptureData))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vSpeedControlPWMHandle
</UL>

<P><STRONG><a name="[185]"></a>MOS2_u8ModBusRecHandle</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, modbus_2.o(.text.MOS2_u8ModBusRecHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MOS2_u8ModBusRecHandle &rArr; MOS2_vEventHandler &rArr; MOS2_vRegisterHandler &rArr; MOS2_vSlaveAddressUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS2_vReadWriteDataCommon
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS2_vEventHandler
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS2_vCheckWriteDataCommand
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS2_vCheckReadAllDataCommand
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS2_vRecep_do
</UL>

<P><STRONG><a name="[186]"></a>MOS2_vCheckReadAllDataCommand</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, modbus_2.o(.text.MOS2_vCheckReadAllDataCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MOS2_vCheckReadAllDataCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS2_u8ModBusRecHandle
</UL>

<P><STRONG><a name="[187]"></a>MOS2_vCheckWriteDataCommand</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, modbus_2.o(.text.MOS2_vCheckWriteDataCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MOS2_vCheckWriteDataCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS2_u8ModBusRecHandle
</UL>

<P><STRONG><a name="[b]"></a>MOS2_vError_do</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, appmodbus2stm.o(.text.MOS2_vError_do))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MOS2_vError_do &rArr; FSM_vStateTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSM_vStateTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appmodbus2stm.o(.data.MOS_ACTION_MAP)
</UL>
<P><STRONG><a name="[a]"></a>MOS2_vError_entry</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, appmodbus2stm.o(.text.MOS2_vError_entry))
<BR>[Address Reference Count : 1]<UL><LI> appmodbus2stm.o(.data.MOS_ACTION_MAP)
</UL>
<P><STRONG><a name="[c]"></a>MOS2_vError_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, appmodbus2stm.o(.text.MOS2_vError_exit))
<BR>[Address Reference Count : 1]<UL><LI> appmodbus2stm.o(.data.MOS_ACTION_MAP)
</UL>
<P><STRONG><a name="[18a]"></a>MOS2_vEventHandler</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, modbus_2.o(.text.MOS2_vEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MOS2_vEventHandler &rArr; MOS2_vRegisterHandler &rArr; MOS2_vSlaveAddressUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS2_vRegisterHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS2_u8ModBusRecHandle
</UL>

<P><STRONG><a name="[87]"></a>MOS2_vGetActionMap</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, appmodbus2stm.o(.text.MOS2_vGetActionMap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MOS2_vGetActionMap
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMS_vInitModbus2Stm
</UL>

<P><STRONG><a name="[18d]"></a>MOS2_vGetTargetSpeed</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, modbus_2.o(.text.MOS2_vGetTargetSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MOS2_vGetTargetSpeed &rArr; MOS2_vReadRegister &rArr; UART_vWriteDataUART3 &rArr; UART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS2_vReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS2_vTrans_do
</UL>

<P><STRONG><a name="[e]"></a>MOS2_vIdle_do</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, appmodbus2stm.o(.text.MOS2_vIdle_do))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MOS2_vIdle_do &rArr; FSM_vStateTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STK_tGetSafeTime
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSM_vStateTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appmodbus2stm.o(.data.MOS_ACTION_MAP)
</UL>
<P><STRONG><a name="[d]"></a>MOS2_vIdle_entry</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, appmodbus2stm.o(.text.MOS2_vIdle_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MOS2_vIdle_entry &rArr; STK_tGetSafeTime
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STK_tGetSafeTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appmodbus2stm.o(.data.MOS_ACTION_MAP)
</UL>
<P><STRONG><a name="[f]"></a>MOS2_vIdle_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, appmodbus2stm.o(.text.MOS2_vIdle_exit))
<BR>[Address Reference Count : 1]<UL><LI> appmodbus2stm.o(.data.MOS_ACTION_MAP)
</UL>
<P><STRONG><a name="[2]"></a>MOS2_vInit_do</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, appmodbus2stm.o(.text.MOS2_vInit_do))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MOS2_vInit_do &rArr; FSM_vStateTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSM_vStateTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appmodbus2stm.o(.data.MOS_ACTION_MAP)
</UL>
<P><STRONG><a name="[1]"></a>MOS2_vInit_entry</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, appmodbus2stm.o(.text.MOS2_vInit_entry))
<BR>[Address Reference Count : 1]<UL><LI> appmodbus2stm.o(.data.MOS_ACTION_MAP)
</UL>
<P><STRONG><a name="[3]"></a>MOS2_vInit_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, appmodbus2stm.o(.text.MOS2_vInit_exit))
<BR>[Address Reference Count : 1]<UL><LI> appmodbus2stm.o(.data.MOS_ACTION_MAP)
</UL>
<P><STRONG><a name="[18f]"></a>MOS2_vModbudFun6</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, modbus_2.o(.text.MOS2_vModbudFun6))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MOS2_vModbudFun6 &rArr; MOS2_vTriggerEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS2_vTriggerEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS2_vReadWriteDataCommon
</UL>

<P><STRONG><a name="[194]"></a>MOS2_vModbusFun4</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, modbus_2.o(.text.MOS2_vModbusFun4))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MOS2_vModbusFun4
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS2_vReadWriteDataCommon
</UL>

<P><STRONG><a name="[18e]"></a>MOS2_vReadRegister</STRONG> (Thumb, 268 bytes, Stack size 88 bytes, modbus_2.o(.text.MOS2_vReadRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MOS2_vReadRegister &rArr; UART_vWriteDataUART3 &rArr; UART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vWriteDataUART3
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vModbusTxDisableUART3
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_bUARTTXBUFEMPTUART3
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS2_vWriteCurrentSpeed
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS2_vGetTargetSpeed
</UL>

<P><STRONG><a name="[189]"></a>MOS2_vReadWriteDataCommon</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, modbus_2.o(.text.MOS2_vReadWriteDataCommon))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MOS2_vReadWriteDataCommon &rArr; MOS2_vModbudFun6 &rArr; MOS2_vTriggerEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS2_vModbusFun4
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS2_vModbudFun6
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS2_u8ModBusRecHandle
</UL>

<P><STRONG><a name="[8]"></a>MOS2_vRecep_do</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, appmodbus2stm.o(.text.MOS2_vRecep_do))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MOS2_vRecep_do &rArr; MOS2_u8ModBusRecHandle &rArr; MOS2_vEventHandler &rArr; MOS2_vRegisterHandler &rArr; MOS2_vSlaveAddressUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS2_u8ModBusRecHandle
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSM_vStateTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appmodbus2stm.o(.data.MOS_ACTION_MAP)
</UL>
<P><STRONG><a name="[7]"></a>MOS2_vRecep_entry</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, appmodbus2stm.o(.text.MOS2_vRecep_entry))
<BR>[Address Reference Count : 1]<UL><LI> appmodbus2stm.o(.data.MOS_ACTION_MAP)
</UL>
<P><STRONG><a name="[9]"></a>MOS2_vRecep_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, appmodbus2stm.o(.text.MOS2_vRecep_exit))
<BR>[Address Reference Count : 1]<UL><LI> appmodbus2stm.o(.data.MOS_ACTION_MAP)
</UL>
<P><STRONG><a name="[18c]"></a>MOS2_vRegisterHandler</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, modbus_2.o(.text.MOS2_vRegisterHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MOS2_vRegisterHandler &rArr; MOS2_vSlaveAddressUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS2_vSlaveAddressUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS2_vEventHandler
</UL>

<P><STRONG><a name="[195]"></a>MOS2_vSlaveAddressUpdate</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, modbus_2.o(.text.MOS2_vSlaveAddressUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MOS2_vSlaveAddressUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS2_vWriteDataIntoEEP
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS2_vRegisterHandler
</UL>

<P><STRONG><a name="[5]"></a>MOS2_vTrans_do</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, appmodbus2stm.o(.text.MOS2_vTrans_do))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MOS2_vTrans_do &rArr; MOS2_vGetTargetSpeed &rArr; MOS2_vReadRegister &rArr; UART_vWriteDataUART3 &rArr; UART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS2_vWriteCurrentSpeed
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS2_vGetTargetSpeed
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSM_vStateTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appmodbus2stm.o(.data.MOS_ACTION_MAP)
</UL>
<P><STRONG><a name="[4]"></a>MOS2_vTrans_entry</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, appmodbus2stm.o(.text.MOS2_vTrans_entry))
<BR>[Address Reference Count : 1]<UL><LI> appmodbus2stm.o(.data.MOS_ACTION_MAP)
</UL>
<P><STRONG><a name="[6]"></a>MOS2_vTrans_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, appmodbus2stm.o(.text.MOS2_vTrans_exit))
<BR>[Address Reference Count : 1]<UL><LI> appmodbus2stm.o(.data.MOS_ACTION_MAP)
</UL>
<P><STRONG><a name="[190]"></a>MOS2_vTriggerEvent</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, modbus_2.o(.text.MOS2_vTriggerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MOS2_vTriggerEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS2_vModbudFun6
</UL>

<P><STRONG><a name="[197]"></a>MOS2_vWriteCurrentSpeed</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, modbus_2.o(.text.MOS2_vWriteCurrentSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MOS2_vWriteCurrentSpeed &rArr; MOS2_vReadRegister &rArr; UART_vWriteDataUART3 &rArr; UART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS2_vReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS2_vTrans_do
</UL>

<P><STRONG><a name="[196]"></a>MOS2_vWriteDataIntoEEP</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, modbus_2.o(.text.MOS2_vWriteDataIntoEEP))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS2_vSlaveAddressUpdate
</UL>

<P><STRONG><a name="[1d1]"></a>MOS_bGetInitStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, modbus.o(.text.MOS_bGetInitStatus))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[198]"></a>MOS_vCallbackInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, modbus.o(.text.MOS_vCallbackInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MOS_vCallbackInit &rArr; UART_vSetUartReceiveCallbackFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vSetUartReceiveCallbackFunc
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STK_vSetGenericTimerCallbackFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_vModbusInit
</UL>

<P><STRONG><a name="[19f]"></a>MOS_vCheckReadAllDataCommand</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, modbus.o(.text.MOS_vCheckReadAllDataCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MOS_vCheckReadAllDataCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_vModBusHandler
</UL>

<P><STRONG><a name="[1a0]"></a>MOS_vCheckWriteDataCommand</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, modbus.o(.text.MOS_vCheckWriteDataCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MOS_vCheckWriteDataCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_vModBusHandler
</UL>

<P><STRONG><a name="[1aa]"></a>MOS_vConfigureSlaveAddress</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, modbus.o(.text.MOS_vConfigureSlaveAddress))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_vModbusInit
</UL>

<P><STRONG><a name="[3e]"></a>MOS_vDataReceiveInterrupt</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, modbus.o(.text.MOS_vDataReceiveInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MOS_vDataReceiveInterrupt &rArr; UART_vGetUARTData &rArr; UART_ReceiveData
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vGetUARTData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbus.o(.text.MOS_vCallbackInit)
</UL>
<P><STRONG><a name="[19c]"></a>MOS_vEventHandler</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, modbus.o(.text.MOS_vEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MOS_vEventHandler &rArr; MOS_vRegisterHandler &rArr; MOS_vSlaveAddressUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_vRegisterHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_vModBusHandler
</UL>

<P><STRONG><a name="[88]"></a>MOS_vGetEventMap</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, appmodbus2stm.o(.text.MOS_vGetEventMap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MOS_vGetEventMap
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMS_vInitModbus2Stm
</UL>

<P><STRONG><a name="[19e]"></a>MOS_vModBusHandler</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, modbus.o(.text.MOS_vModBusHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MOS_vModBusHandler &rArr; MOS_vReadWriteDataCommon &rArr; MOS_vModbudFun6 &rArr; UART_vWriteData &rArr; UART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_vReadWriteDataCommon
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_vEventHandler
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_vCheckWriteDataCommand
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_vCheckReadAllDataCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1a2]"></a>MOS_vModbudFun6</STRONG> (Thumb, 284 bytes, Stack size 80 bytes, modbus.o(.text.MOS_vModbudFun6))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MOS_vModbudFun6 &rArr; UART_vWriteData &rArr; UART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vWriteData
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vModbusTxDisable
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_bUARTTXBUFEMPT
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_vTriggerEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_vReadWriteDataCommon
</UL>

<P><STRONG><a name="[1a7]"></a>MOS_vModbusFun4</STRONG> (Thumb, 304 bytes, Stack size 56 bytes, modbus.o(.text.MOS_vModbusFun4))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MOS_vModbusFun4 &rArr; UART_vWriteData &rArr; UART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vWriteData
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vModbusTxDisable
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_bUARTTXBUFEMPT
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_vReadWriteDataCommon
</UL>

<P><STRONG><a name="[1a8]"></a>MOS_vModbusInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, modbus.o(.text.MOS_vModbusInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MOS_vModbusInit &rArr; MOS_vCallbackInit &rArr; UART_vSetUartReceiveCallbackFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_vModbusProtocalConfig
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_vConfigureSlaveAddress
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_vCallbackInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1a9]"></a>MOS_vModbusProtocalConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, modbus.o(.text.MOS_vModbusProtocalConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_vModbusInit
</UL>

<P><STRONG><a name="[1a1]"></a>MOS_vReadWriteDataCommon</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, modbus.o(.text.MOS_vReadWriteDataCommon))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MOS_vReadWriteDataCommon &rArr; MOS_vModbudFun6 &rArr; UART_vWriteData &rArr; UART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_vModbusFun4
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_vModbudFun6
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_vModBusHandler
</UL>

<P><STRONG><a name="[19d]"></a>MOS_vRegisterHandler</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, modbus.o(.text.MOS_vRegisterHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MOS_vRegisterHandler &rArr; MOS_vSlaveAddressUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_vSlaveAddressUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_vEventHandler
</UL>

<P><STRONG><a name="[1ab]"></a>MOS_vSlaveAddressUpdate</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, modbus.o(.text.MOS_vSlaveAddressUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MOS_vSlaveAddressUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_vWriteDataIntoEEP
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_vRegisterHandler
</UL>

<P><STRONG><a name="[3d]"></a>MOS_vTimeoutInterrupt</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, modbus.o(.text.MOS_vTimeoutInterrupt))
<BR>[Address Reference Count : 1]<UL><LI> modbus.o(.text.MOS_vCallbackInit)
</UL>
<P><STRONG><a name="[1a3]"></a>MOS_vTriggerEvent</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, modbus.o(.text.MOS_vTriggerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MOS_vTriggerEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_vModbudFun6
</UL>

<P><STRONG><a name="[1ac]"></a>MOS_vWriteDataIntoEEP</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, modbus.o(.text.MOS_vWriteDataIntoEEP))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_vSlaveAddressUpdate
</UL>

<P><STRONG><a name="[174]"></a>MOT_vAngleSmoothSwitch</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, statemachine.o(.text.MOT_vAngleSmoothSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MOT_vAngleSmoothSwitch &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunSpinFast
</UL>

<P><STRONG><a name="[11]"></a>NMI_Handler</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, iec60730_b_aux.o(.text.NMI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NMI_Handler &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClearITPendingBit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32spin0280_keil.o(RESET)
</UL>
<P><STRONG><a name="[15b]"></a>NVIC_Configure</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, mm32_it.o(.text.NVIC_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NVIC_Configure &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt_Init
</UL>

<P><STRONG><a name="[101]"></a>NVIC_Init</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, hal_misc.o(.text.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_NVIC_Init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configure
</UL>

<P><STRONG><a name="[d7]"></a>OPAMP_Configure</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hal_opamp.o(.text.OPAMP_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OPAMP_Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Opamp_Init
</UL>

<P><STRONG><a name="[173]"></a>PMSM_Obs</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, foc_pmsm.o(.text.PMSM_Obs))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PMSM_Obs &rArr; MLIB_PLL &rArr; MLIB_AddSat_Q31
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLIB_SMO
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLIB_PLL
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLIB_Mul_Q15
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunSpinFast
</UL>

<P><STRONG><a name="[17]"></a>PVD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mm32_it.o(.text.PVD_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32spin0280_keil.o(RESET)
</UL>
<P><STRONG><a name="[cf]"></a>PVU_CheckStatus</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_iwdg.o(.text.PVU_CheckStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PVU_CheckStatus &rArr; IWDG_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Iwdg_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iwdg_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
</UL>

<P><STRONG><a name="[18]"></a>PWM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mm32_it.o(.text.PWM_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32spin0280_keil.o(RESET)
</UL>
<P><STRONG><a name="[167]"></a>PWM_Update</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, statemachine.o(.text.PWM_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PWM_Update &rArr; MLIB_Mul_Q15
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLIB_Mul_Q15
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunStartupFast
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunSpinFast
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunReadyFast
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunFreewheelFast
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunAlignFast
</UL>

<P><STRONG><a name="[1b1]"></a>Peripheral_Init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, board.o(.text.Peripheral_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Peripheral_Init &rArr; Board_ADC_Init &rArr; Drv_Adc_Channel_Init &rArr; ADC_RegularChannelConfig &rArr; ADC_TempSensorVrefintCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Sqrt_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Pwm_Init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Opamp_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Iwdg_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Hwdiv_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Comp_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_ADC_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOD_vExti9Config
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vCONSOLE_InitUART3
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vCONSOLE_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[ab]"></a>QMATH_max</STRONG> (Thumb, 60 bytes, Stack size 28 bytes, math.o(.text.QMATH_max))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = QMATH_max
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_vCheckOverThresholdLimit
</UL>

<P><STRONG><a name="[92]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hal_rcc.o(.text.RCC_AHBPeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Sqrt_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Hwdiv_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Pwm_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Op_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Comp_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Adc_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_vUARTInitUART3
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_vUARTInit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_vExti9Config
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_vDirectionDetect_Init
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_B_FullFlash_test
</UL>

<P><STRONG><a name="[1ef]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hal_rcc.o(.text.RCC_APB1PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vCONSOLE_InitUART3
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vCONSOLE_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2_Init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_Init
</UL>

<P><STRONG><a name="[bb]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hal_rcc.o(.text.RCC_APB2PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Pwm_Init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Opamp_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Comp_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Adc_Basic_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_NVIC_Config
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Tim16_Counter_Init
</UL>

<P><STRONG><a name="[1af]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal_rcc.o(.text.RCC_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>

<P><STRONG><a name="[1d3]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, hal_rcc.o(.text.RCC_ClockSecuritySystemCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_ClockSecuritySystemCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[a7]"></a>RCC_GPIO_ClockCmd</STRONG> (Thumb, 244 bytes, Stack size 20 bytes, hal_rcc.o(.text.RCC_GPIO_ClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GPIO_ClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUart_Init
</UL>

<P><STRONG><a name="[ce]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, hal_rcc.o(.text.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Iwdg_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iwdg_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_B_WDGSelfTest
</UL>

<P><STRONG><a name="[1b4]"></a>RCC_GetHCLKFreq</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal_rcc.o(.text.RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = RCC_GetHCLKFreq &rArr; RCC_GetSysClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1Freq
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK2Freq
</UL>

<P><STRONG><a name="[1b6]"></a>RCC_GetPCLK1Freq</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hal_rcc.o(.text.RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = RCC_GetPCLK1Freq &rArr; RCC_GetHCLKFreq &rArr; RCC_GetSysClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2_Init
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[1b7]"></a>RCC_GetPCLK2Freq</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hal_rcc.o(.text.RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = RCC_GetPCLK2Freq &rArr; RCC_GetHCLKFreq &rArr; RCC_GetSysClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[1b5]"></a>RCC_GetSysClockFreq</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, hal_rcc.o(.text.RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RCC_GetSysClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[1a]"></a>RCC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mm32_it.o(.text.RCC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32spin0280_keil.o(RESET)
</UL>
<P><STRONG><a name="[cd]"></a>RCC_LSICmd</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hal_rcc.o(.text.RCC_LSICmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_LSICmd
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Iwdg_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iwdg_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2_Init
</UL>

<P><STRONG><a name="[a6]"></a>RCC_UART_ClockCmd</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, hal_rcc.o(.text.RCC_UART_ClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_UART_ClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUart_Init
</UL>

<P><STRONG><a name="[122]"></a>RMP_vOpenPhaseCheckComplex</STRONG> (Thumb, 592 bytes, Stack size 48 bytes, fsphaseloss.o(.text.RMP_vOpenPhaseCheckComplex))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = RMP_vOpenPhaseCheckComplex &rArr; FPL_vEvaluateCurrentAsymmetry &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STK_tGetSafeTime
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERT_vErrorReport
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUR_vGetPhaseCurrentBufferSamples
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPL_vEvaluateVoltageAsymmetry
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPL_vEvaluateStaticVector
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPL_vEvaluateCurrentAsymmetry
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPL_vPhaseLossCheck
</UL>

<P><STRONG><a name="[d2]"></a>RVU_CheckStatus</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_iwdg.o(.text.RVU_CheckStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RVU_CheckStatus &rArr; IWDG_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Iwdg_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iwdg_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
</UL>

<P><STRONG><a name="[141]"></a>Ramtest_config</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, iec60730_b_startup.o(.text.Ramtest_config))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_B_TranspMarchInit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_B_startup
</UL>

<P><STRONG><a name="[1c6]"></a>SCL_bDataFilter</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, speedcontrol.o(.text.SCL_bDataFilter))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vSpeedControlPWMHandle
</UL>

<P><STRONG><a name="[1b8]"></a>SCL_vCalcualteTargetSpeed</STRONG> (Thumb, 520 bytes, Stack size 72 bytes, speedcontrol.o(.text.SCL_vCalcualteTargetSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SCL_vCalcualteTargetSpeed &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLIB_Mul_Q15
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vSpeedControlPWMHandle
</UL>

<P><STRONG><a name="[1bc]"></a>SCL_vCalculateActualSpeedFromPU</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, speedcontrol.o(.text.SCL_vCalculateActualSpeedFromPU))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SCL_vCalculateActualSpeedFromPU &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_vSetOutputFreq
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vSpeedControlPWMHandle
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vSpeedControlModbusHandle
</UL>

<P><STRONG><a name="[1bd]"></a>SCL_vMotorDirectionCheck</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, speedcontrol.o(.text.SCL_vMotorDirectionCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SCL_vMotorDirectionCheck &rArr; GPIO_ReadInputDataBit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vSpeedControlPWMHandle
</UL>

<P><STRONG><a name="[1be]"></a>SCL_vSpeedControlHandle</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, speedcontrol.o(.text.SCL_vSpeedControlHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SCL_vSpeedControlHandle &rArr; SCL_vSpeedControlPWMHandle &rArr; SCL_vCalcualteTargetSpeed &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFN_vForwardParamStartupInit
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFN_vBackwardParamStartupInit
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vSpeedControlPWMHandle
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vSpeedControlModbusHandle
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vSpeedControlMasterModbusHandle
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMS_vModbus2Statemachine
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1c2]"></a>SCL_vSpeedControlMasterModbusHandle</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, speedcontrol.o(.text.SCL_vSpeedControlMasterModbusHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SCL_vSpeedControlMasterModbusHandle &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vSpeedControlHandle
</UL>

<P><STRONG><a name="[1c0]"></a>SCL_vSpeedControlModbusHandle</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, speedcontrol.o(.text.SCL_vSpeedControlModbusHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SCL_vSpeedControlModbusHandle &rArr; SCL_vCalculateActualSpeedFromPU &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vCalculateActualSpeedFromPU
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vSpeedControlHandle
</UL>

<P><STRONG><a name="[1bf]"></a>SCL_vSpeedControlPWMHandle</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, speedcontrol.o(.text.SCL_vSpeedControlPWMHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SCL_vSpeedControlPWMHandle &rArr; SCL_vCalcualteTargetSpeed &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIT_ptGetCaptureData
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vMotorDirectionCheck
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vCalculateActualSpeedFromPU
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vCalcualteTargetSpeed
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_bDataFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vSpeedControlHandle
</UL>

<P><STRONG><a name="[f5]"></a>SMP_vReadWordN</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, simeep.o(.text.SMP_vReadWordN))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = SMP_vReadWordN &rArr; EEPROM_Read &rArr; FLASH_SIM_WriteLocate &rArr; FLASH_SIM_FindEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERT_vErrorCodeAccess
</UL>

<P><STRONG><a name="[f4]"></a>SMP_vWriteWordN</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, simeep.o(.text.SMP_vWriteWordN))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = SMP_vWriteWordN &rArr; EEPROM_Write &rArr; FLASH_SIM_WriteEE &rArr; FLASH_SIM_ProgramEE &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation &rArr; FLASH_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERT_vErrorCodeAccess
</UL>

<P><STRONG><a name="[108]"></a>SMR_vCheckSpeedMonitor</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, speedmonitor.o(.text.SMR_vCheckSpeedMonitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SMR_vCheckSpeedMonitor &rArr; SMR_vCheckSpeedMonitorImplement &rArr; ERT_vErrorReport &rArr; ERT_vErrorReaction &rArr; M1_SwitchForceFault &rArr; variable_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMR_vCheckSpeedMonitorImplement
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FHE_vFunctionSafetyCheck
</UL>

<P><STRONG><a name="[1c7]"></a>SMR_vCheckSpeedMonitorImplement</STRONG> (Thumb, 308 bytes, Stack size 64 bytes, speedmonitor.o(.text.SMR_vCheckSpeedMonitorImplement))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SMR_vCheckSpeedMonitorImplement &rArr; ERT_vErrorReport &rArr; ERT_vErrorReaction &rArr; M1_SwitchForceFault &rArr; variable_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STK_tGetSafeTime
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERT_vErrorReport
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMR_vCheckSpeedMonitor
</UL>

<P><STRONG><a name="[1c8]"></a>SMR_vIndependentMotorModelCalculation</STRONG> (Thumb, 588 bytes, Stack size 104 bytes, speedmonitor.o(.text.SMR_vIndependentMotorModelCalculation))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SMR_vIndependentMotorModelCalculation &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRR_vClarkeTrans
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPM_vCart2Pol
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIR_vCalcFilter
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLIB_Mul_Q15
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCN_vGetThreePhaseVol
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUR_vGetThreePhaseCur
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMR_vSpeedEvaluationComplex
</UL>

<P><STRONG><a name="[10b]"></a>SMR_vSpeedEvaluation</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, speedmonitor.o(.text.SMR_vSpeedEvaluation))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = SMR_vSpeedEvaluation &rArr; SMR_vSpeedEvaluationComplex &rArr; SMR_vIndependentMotorModelCalculation &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMR_vSpeedEvaluationComplex
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FHE_vHandleTask
</UL>

<P><STRONG><a name="[1cc]"></a>SMR_vSpeedEvaluationComplex</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, speedmonitor.o(.text.SMR_vSpeedEvaluationComplex))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SMR_vSpeedEvaluationComplex &rArr; SMR_vIndependentMotorModelCalculation &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMR_vIndependentMotorModelCalculation
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMR_vSpeedEvaluation
</UL>

<P><STRONG><a name="[2f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mm32_it.o(.text.SPI1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32spin0280_keil.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mm32_it.o(.text.SPI2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32spin0280_keil.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>STK_tGetSafeTime</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, fsclock.o(.text.STK_tGetSafeTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = STK_tGetSafeTime
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSM_ucHandleTask
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS2_vIdle_entry
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS2_vIdle_do
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOL_bVoltageErrorDetection
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOL_bInitDcLinkVoltageMeasurement
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOL_bHandleTask
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUR_bCheckMotCurrentMeasValues
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMR_vCheckSpeedMonitorImplement
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRK_vCheckMotorLockComplex
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_vOpenPhaseCheckComplex
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOL_bCheckUnderVoltageCondition
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOL_bCheckOverVoltageCondition
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUR_vCheckMotCurrentMeasOffsetVoltage
</UL>

<P><STRONG><a name="[199]"></a>STK_vSetGenericTimerCallbackFunc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mm32_it.o(.text.STK_vSetGenericTimerCallbackFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STK_vSetGenericTimerCallbackFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_vCallbackInit
</UL>

<P><STRONG><a name="[81]"></a>STK_vTriggerSafeTime</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, fsclock.o(.text.STK_vTriggerSafeTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = STK_vTriggerSafeTime &rArr; ERT_vErrorReport &rArr; ERT_vErrorReaction &rArr; M1_SwitchForceFault &rArr; variable_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_u32GetSystickTimerCounter
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERT_vErrorReport
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_IRQHandler
</UL>

<P><STRONG><a name="[15]"></a>SysTick_Handler</STRONG> (Thumb, 408 bytes, Stack size 32 bytes, iec60730_b_aux.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; FailSafePOR &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_bGetInitStatus
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_B_TranspMarch
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailSafePOR
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32spin0280_keil.o(RESET)
</UL>
<P><STRONG><a name="[1d2]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, system_mm32spin0280.o(.text.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SystemCoreClockUpdate &rArr; RCC_ClockSecuritySystemCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClockSecuritySystemCmd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[36]"></a>SystemInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system_mm32spin0280.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockWithHsiPLL &rArr; AutoCalPllFactor &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToDefaultHSI
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32spin0280_keil.o(.text)
</UL>
<P><STRONG><a name="[29]"></a>TIM14_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mm32_it.o(.text.TIM14_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32spin0280_keil.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM16_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mm32_it.o(.text.TIM16_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32spin0280_keil.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM17_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mm32_it.o(.text.TIM17_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32spin0280_keil.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, mm32_it.o(.text.TIM1_BRK_UP_TRG_COM_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32spin0280_keil.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mm32_it.o(.text.TIM1_CC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32spin0280_keil.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM2_IRQHandler</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, iec60730_b_clocktest.o(.text.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = TIM2_IRQHandler &rArr; RCC_GetPCLK1Freq &rArr; RCC_GetHCLKFreq &rArr; RCC_GetSysClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1Freq
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetFlagStatus
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32spin0280_keil.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM3_IRQHandler</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mm32_it.o(.text.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TIM3_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture2
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture1
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32spin0280_keil.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM8_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mm32_it.o(.text.TIM8_BRK_UP_TRG_COM_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32spin0280_keil.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mm32_it.o(.text.TIM8_CC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32spin0280_keil.o(RESET)
</UL>
<P><STRONG><a name="[e2]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hal_tim.o(.text.TIM_ARRPreloadConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_ARRPreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Pwm_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Tim16_Counter_Init
</UL>

<P><STRONG><a name="[da]"></a>TIM_BDTRConfig</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, hal_tim.o(.text.TIM_BDTRConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM_BDTRConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Pwm_Init
</UL>

<P><STRONG><a name="[152]"></a>TIM_CCxCmd</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, hal_tim.o(.text.TIM_CCxCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM_CCxCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_InitClock_Xcross_Measurement
</UL>

<P><STRONG><a name="[151]"></a>TIM_ClearFlag</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, hal_tim.o(.text.TIM_ClearFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt_Init
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_InitClock_Xcross_Measurement
</UL>

<P><STRONG><a name="[1da]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, hal_tim.o(.text.TIM_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[e3]"></a>TIM_Cmd</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hal_tim.o(.text.TIM_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Pwm_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Tim16_Counter_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_InitClock_Xcross_Measurement
</UL>

<P><STRONG><a name="[e4]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hal_tim.o(.text.TIM_CtrlPWMOutputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_CtrlPWMOutputs
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Pwm_Init
</UL>

<P><STRONG><a name="[e9]"></a>TIM_DeInit</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, hal_tim.o(.text.TIM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM_DeInit &rArr; exRCC_APB1PeriphReset
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exRCC_APB1PeriphReset
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exRCC_APB2PeriphReset
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Tim16_Counter_Init
</UL>

<P><STRONG><a name="[1db]"></a>TIM_GetCapture1</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hal_tim.o(.text.TIM_GetCapture1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_GetCapture1
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[1dc]"></a>TIM_GetCapture2</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hal_tim.o(.text.TIM_GetCapture2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_GetCapture2
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[1d6]"></a>TIM_GetCapture4</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hal_tim.o(.text.TIM_GetCapture4))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_GetCapture4
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[eb]"></a>TIM_GetCounter</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hal_tim.o(.text.TIM_GetCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_u32GetTim16CountVal
</UL>

<P><STRONG><a name="[1d7]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, hal_tim.o(.text.TIM_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[1d5]"></a>TIM_GetITStatus</STRONG> (Thumb, 70 bytes, Stack size 36 bytes, hal_tim.o(.text.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[1df]"></a>TIM_ICInit</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, hal_tim.o(.text.TIM_ICInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TIM_ICInit &rArr; TI4_Configure
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Configure
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Configure
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Configure
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2_Init
</UL>

<P><STRONG><a name="[15e]"></a>TIM_ITConfig</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, hal_tim.o(.text.TIM_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_FaultDetection
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2_Init
</UL>

<P><STRONG><a name="[db]"></a>TIM_OC1Init</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, hal_tim.o(.text.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Pwm_Init
</UL>

<P><STRONG><a name="[df]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, hal_tim.o(.text.TIM_OC1PreloadConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM_OC1PreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Pwm_Init
</UL>

<P><STRONG><a name="[dc]"></a>TIM_OC2Init</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, hal_tim.o(.text.TIM_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Pwm_Init
</UL>

<P><STRONG><a name="[e0]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, hal_tim.o(.text.TIM_OC2PreloadConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM_OC2PreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Pwm_Init
</UL>

<P><STRONG><a name="[dd]"></a>TIM_OC3Init</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, hal_tim.o(.text.TIM_OC3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Pwm_Init
</UL>

<P><STRONG><a name="[e1]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, hal_tim.o(.text.TIM_OC3PreloadConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM_OC3PreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Pwm_Init
</UL>

<P><STRONG><a name="[de]"></a>TIM_OC4Init</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, hal_tim.o(.text.TIM_OC4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Pwm_Init
</UL>

<P><STRONG><a name="[e8]"></a>TIM_OCStructInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hal_tim.o(.text.TIM_OCStructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_OCStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Tim16_Counter_Init
</UL>

<P><STRONG><a name="[ed]"></a>TIM_SetAutoreload</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, hal_tim.o(.text.TIM_SetAutoreload))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_SetAutoreload
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_vSetOutputFreq
</UL>

<P><STRONG><a name="[1e1]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, hal_tim.o(.text.TIM_SetIC1Prescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM_SetIC1Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1e3]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, hal_tim.o(.text.TIM_SetIC2Prescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM_SetIC2Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1e5]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, hal_tim.o(.text.TIM_SetIC3Prescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM_SetIC3Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1e7]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, hal_tim.o(.text.TIM_SetIC4Prescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM_SetIC4Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[d9]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, hal_tim.o(.text.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Pwm_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Tim16_Counter_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2_Init
</UL>

<P><STRONG><a name="[e7]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hal_tim.o(.text.TIM_TimeBaseStructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TimeBaseStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Tim16_Counter_Init
</UL>

<P><STRONG><a name="[16b]"></a>TIM_bBrakeUpdate</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, drv_pwm.o(.text.TIM_bBrakeUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = TIM_bBrakeUpdate &rArr; TIM_vSetCompareValues
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_vSetCompareValues
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunBrakeFast
</UL>

<P><STRONG><a name="[170]"></a>TIM_bSetOutputConfig</STRONG> (Thumb, 148 bytes, Stack size 88 bytes, drv_pwm.o(.text.TIM_bSetOutputConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = TIM_bSetOutputConfig &rArr; TIM_vSetCompareValues
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_vSetOutputs
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_vSetCompareValues
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_vDutyCycleToCompare
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunReadyFast
</UL>

<P><STRONG><a name="[1e8]"></a>TIM_vSetCompareValues</STRONG> (Thumb, 104 bytes, Stack size 60 bytes, drv_pwm.o(.text.TIM_vSetCompareValues))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TIM_vSetCompareValues
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_bSetOutputConfig
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_bBrakeUpdate
</UL>

<P><STRONG><a name="[1ea]"></a>TIM_vSetOutputs</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, drv_pwm.o(.text.TIM_vSetOutputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_vSetOutputs
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_bSetOutputConfig
</UL>

<P><STRONG><a name="[1c9]"></a>TRR_vClarkeTrans</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, transfer.o(.text.TRR_vClarkeTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TRR_vClarkeTrans
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMR_vIndependentMotorModelCalculation
</UL>

<P><STRONG><a name="[1ee]"></a>TSE_vAdaptInterfaceFromFlag2TaskCall</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, timeslice.o(.text.TSE_vAdaptInterfaceFromFlag2TaskCall))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSE_vSliceTaskHandle
</UL>

<P><STRONG><a name="[1eb]"></a>TSE_vRegisterHandler</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, timeslice.o(.text.TSE_vRegisterHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TSE_vRegisterHandler &rArr; VOL_vTrackVoltageValues &rArr; VOL_vCalculateRefVolt &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOL_vTrackVoltageValues
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTE_vTemperatureCal
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSE_vSliceTaskHandle
</UL>

<P><STRONG><a name="[1ed]"></a>TSE_vSliceTaskHandle</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, timeslice.o(.text.TSE_vSliceTaskHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TSE_vSliceTaskHandle &rArr; TSE_vRegisterHandler &rArr; VOL_vTrackVoltageValues &rArr; VOL_vCalculateRefVolt &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSE_vRegisterHandler
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSE_vAdaptInterfaceFromFlag2TaskCall
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[150]"></a>Tim2_Init</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, iec60730_b_clocktest.o(.text.Tim2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Tim2_Init &rArr; TIM_ICInit &rArr; TI4_Configure
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSICmd
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exNVIC_Init
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1Freq
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_InitClock_Xcross_Measurement
</UL>

<P><STRONG><a name="[31]"></a>UART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mm32_it.o(.text.UART1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32spin0280_keil.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>UART2_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mm32_it.o(.text.UART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART2_IRQHandler &rArr; UART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetITStatus
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32spin0280_keil.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>UART3_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mm32_it.o(.text.UART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART3_IRQHandler &rArr; UART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetITStatus
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32spin0280_keil.o(RESET)
</UL>
<P><STRONG><a name="[1f2]"></a>UART_ClearITPendingBit</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, hal_uart.o(.text.UART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vCONSOLE_InitUART3
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vCONSOLE_Init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vWriteDataUART3
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vWriteData
</UL>

<P><STRONG><a name="[a9]"></a>UART_Cmd</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, hal_uart.o(.text.UART_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUart_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vCONSOLE_InitUART3
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vCONSOLE_Init
</UL>

<P><STRONG><a name="[1f3]"></a>UART_GetFlagStatus</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, hal_uart.o(.text.UART_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_bUARTTXBUFEMPTUART3
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_bUARTTXBUFEMPT
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1f1]"></a>UART_GetITStatus</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, hal_uart.o(.text.UART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vWriteDataUART3
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vWriteData
</UL>

<P><STRONG><a name="[1f6]"></a>UART_ITConfig</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, hal_uart.o(.text.UART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vCONSOLE_InitUART3
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vCONSOLE_Init
</UL>

<P><STRONG><a name="[a8]"></a>UART_Init</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, hal_uart.o(.text.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = UART_Init &rArr; RCC_GetPCLK1Freq &rArr; RCC_GetHCLKFreq &rArr; RCC_GetSysClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1Freq
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK2Freq
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUart_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vCONSOLE_InitUART3
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vCONSOLE_Init
</UL>

<P><STRONG><a name="[1f8]"></a>UART_ReceiveData</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hal_uart.o(.text.UART_ReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vGetUARTData
</UL>

<P><STRONG><a name="[1f9]"></a>UART_SendData</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, hal_uart.o(.text.UART_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vWriteDataUART3
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vWriteData
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1f4]"></a>UART_StructInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hal_uart.o(.text.UART_StructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_StructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vCONSOLE_InitUART3
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vCONSOLE_Init
</UL>

<P><STRONG><a name="[1a5]"></a>UART_bUARTTXBUFEMPT</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, drv_sci.o(.text.UART_bUARTTXBUFEMPT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_bUARTTXBUFEMPT &rArr; UART_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_vModbusFun4
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_vModbudFun6
</UL>

<P><STRONG><a name="[192]"></a>UART_bUARTTXBUFEMPTUART3</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, drv_sci_2.o(.text.UART_bUARTTXBUFEMPTUART3))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_bUARTTXBUFEMPTUART3 &rArr; UART_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS2_vReadRegister
</UL>

<P><STRONG><a name="[1b2]"></a>UART_vCONSOLE_Init</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, drv_sci.o(.text.UART_vCONSOLE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = UART_vCONSOLE_Init &rArr; UART_Init &rArr; RCC_GetPCLK1Freq &rArr; RCC_GetHCLKFreq &rArr; RCC_GetSysClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearITPendingBit
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_StructInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITConfig
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Cmd
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vNVICConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Peripheral_Init
</UL>

<P><STRONG><a name="[1b3]"></a>UART_vCONSOLE_InitUART3</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, drv_sci_2.o(.text.UART_vCONSOLE_InitUART3))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = UART_vCONSOLE_InitUART3 &rArr; UART_Init &rArr; RCC_GetPCLK1Freq &rArr; RCC_GetHCLKFreq &rArr; RCC_GetSysClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearITPendingBit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vNVICConfigureUART3
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_StructInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITConfig
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Cmd
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Peripheral_Init
</UL>

<P><STRONG><a name="[19b]"></a>UART_vGetUARTData</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, drv_sci.o(.text.UART_vGetUARTData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_vGetUARTData &rArr; UART_ReceiveData
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_vDataReceiveInterrupt
</UL>

<P><STRONG><a name="[1a6]"></a>UART_vModbusTxDisable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drv_sci.o(.text.UART_vModbusTxDisable))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_vModbusFun4
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_vModbudFun6
</UL>

<P><STRONG><a name="[193]"></a>UART_vModbusTxDisableUART3</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drv_sci_2.o(.text.UART_vModbusTxDisableUART3))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS2_vReadRegister
</UL>

<P><STRONG><a name="[19a]"></a>UART_vSetUartReceiveCallbackFunc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mm32_it.o(.text.UART_vSetUartReceiveCallbackFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_vSetUartReceiveCallbackFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_vCallbackInit
</UL>

<P><STRONG><a name="[1a4]"></a>UART_vWriteData</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, drv_sci.o(.text.UART_vWriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_vWriteData &rArr; UART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetITStatus
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearITPendingBit
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_vModbusFun4
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_vModbudFun6
</UL>

<P><STRONG><a name="[191]"></a>UART_vWriteDataUART3</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, drv_sci_2.o(.text.UART_vWriteDataUART3))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_vWriteDataUART3 &rArr; UART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetITStatus
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearITPendingBit
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS2_vReadRegister
</UL>

<P><STRONG><a name="[1c4]"></a>UFN_vBackwardParamStartupInit</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, user_function.o(.text.UFN_vBackwardParamStartupInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UFN_vBackwardParamStartupInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vSpeedControlHandle
</UL>

<P><STRONG><a name="[1c3]"></a>UFN_vForwardParamStartupInit</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, user_function.o(.text.UFN_vForwardParamStartupInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UFN_vForwardParamStartupInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vSpeedControlHandle
</UL>

<P><STRONG><a name="[40]"></a>VOL_bHandleTask</STRONG> (Thumb, 228 bytes, Stack size 80 bytes, voltage.o(.text.VOL_bHandleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = VOL_bHandleTask &rArr; VOL_vCalcVolLowPassFilters &rArr; FIR_vCalcFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STK_tGetSafeTime
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOL_vCalcVolLowPassFilters
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsmonitor.o(.rodata.FSM_atMonitorConfig)
</UL>
<P><STRONG><a name="[43]"></a>VOL_bInitDcLinkVoltageMeasurement</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, voltage.o(.text.VOL_bInitDcLinkVoltageMeasurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = VOL_bInitDcLinkVoltageMeasurement &rArr; FIR_vInitFilterOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STK_tGetSafeTime
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIR_vInitFilterOutput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsmonitor.o(.rodata.FSM_atMonitorInitFcts)
</UL>
<P><STRONG><a name="[41]"></a>VOL_bVoltageErrorDetection</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, voltage.o(.text.VOL_bVoltageErrorDetection))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = VOL_bVoltageErrorDetection &rArr; VOL_vCheckInternalReferenceVoltageCondition &rArr; ERT_vErrorReport &rArr; ERT_vErrorReaction &rArr; M1_SwitchForceFault &rArr; variable_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STK_tGetSafeTime
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOL_vCheckInternalReferenceVoltageCondition
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOL_vCheck15VVoltageCondition
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOL_bCheckUnderVoltageCondition
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOL_bCheckOverVoltageCondition
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsmonitor.o(.rodata.FSM_atMonitorConfig)
</UL>
<P><STRONG><a name="[202]"></a>VOL_tGet15VolmV</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, voltage.o(.text.VOL_tGet15VolmV))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOL_vCheck15VVoltageCondition
</UL>

<P><STRONG><a name="[105]"></a>VOL_tGetDclVolRawSampleQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, voltage.o(.text.VOL_tGetDclVolRawSampleQ))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCN_vGetPhaseVoltage
</UL>

<P><STRONG><a name="[1fb]"></a>VOL_tGetDclVolV</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, voltage.o(.text.VOL_tGetDclVolV))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOL_bCheckUnderVoltageCondition
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOL_bCheckOverVoltageCondition
</UL>

<P><STRONG><a name="[203]"></a>VOL_tGetInternalVoltRefVolmV</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, voltage.o(.text.VOL_tGetInternalVoltRefVolmV))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOL_vCheckInternalReferenceVoltageCondition
</UL>

<P><STRONG><a name="[137]"></a>VOL_tReadVoltageValue</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, voltage.o(.text.VOL_tReadVoltageValue))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ADC_Result
</UL>

<P><STRONG><a name="[201]"></a>VOL_vCalculateRefVolt</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, voltage.o(.text.VOL_vCalculateRefVolt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VOL_vCalculateRefVolt &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOL_vTrackVoltageValues
</UL>

<P><STRONG><a name="[44]"></a>VOL_vConstValueInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, voltage.o(.text.VOL_vConstValueInit))
<BR>[Address Reference Count : 1]<UL><LI> fsmonitor.o(.rodata.FSM_atMonitorInitFcts)
</UL>
<P><STRONG><a name="[1ec]"></a>VOL_vTrackVoltageValues</STRONG> (Thumb, 408 bytes, Stack size 64 bytes, voltage.o(.text.VOL_vTrackVoltageValues))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = VOL_vTrackVoltageValues &rArr; VOL_vCalculateRefVolt &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOL_vUpdateValue
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOL_vCalculateRefVolt
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSE_vRegisterHandler
</UL>

<P><STRONG><a name="[204]"></a>VOL_vUpdateValue</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, voltage.o(.text.VOL_vUpdateValue))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOL_vTrackVoltageValues
</UL>

<P><STRONG><a name="[160]"></a>Var_Filt</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, user_function.o(.text.Var_Filt))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Var_Filt &rArr; MLIB_FilterMA_Q15 &rArr; MLIB_SubSat_Q31
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLIB_FilterMA_Q15
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_Stop_Slow
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_Init_Slow
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_Fault_Slow
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunWindDetSlow
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunWindDetFast
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunStartupSlow
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunSpinSlow
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunReadySlow
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunFreewheelSlow
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunCalibSlow
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunAlignSlow
</UL>

<P><STRONG><a name="[205]"></a>WDG_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(.text.WDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WDG_Init &rArr; Iwdg_Init &rArr; IWDG_SetPrescaler &rArr; PVU_CheckStatus &rArr; IWDG_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iwdg_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[206]"></a>WDG_Refresh</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(.text.WDG_Refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WDG_Refresh
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[17c]"></a>WDN_bEstimateStartupScenario</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, winddetection.o(.text.WDN_bEstimateStartupScenario))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = WDN_bEstimateStartupScenario &rArr; CUR_vCalThreePhaseCurRMS &rArr; FIR_vCalcFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUR_vCalThreePhaseCurRMS
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUR_u16GetThreePhaseRMS
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_vCheckOverThresholdLimit
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunWindDetSlow
</UL>

<P><STRONG><a name="[17d]"></a>WDN_vAnalyzeStartPower</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, winddetection.o(.text.WDN_vAnalyzeStartPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = WDN_vAnalyzeStartPower &rArr; WDN_vConfigureStartupParam &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDN_vConfigureStartupParam
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunWindDetSlow
</UL>

<P><STRONG><a name="[208]"></a>WDN_vConfigureStartupParam</STRONG> (Thumb, 376 bytes, Stack size 104 bytes, winddetection.o(.text.WDN_vConfigureStartupParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = WDN_vConfigureStartupParam &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDN_vAnalyzeStartPower
</UL>

<P><STRONG><a name="[20a]"></a>WWDG_DeInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal_wwdg.o(.text.WWDG_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WWDG_DeInit &rArr; exRCC_APB1PeriphReset
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exRCC_APB1PeriphReset
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_Init
</UL>

<P><STRONG><a name="[20d]"></a>WWDG_Enable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hal_wwdg.o(.text.WWDG_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WWDG_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_Init
</UL>

<P><STRONG><a name="[16]"></a>WWDG_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mm32_it.o(.text.WWDG_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32spin0280_keil.o(RESET)
</UL>
<P><STRONG><a name="[145]"></a>WWDG_Init</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, iec60730_b_aux.o(.text.WWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WWDG_Init &rArr; RCC_APB1PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_SetWindowValue
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_SetPrescaler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_Enable
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_B_WDGSelfTest
</UL>

<P><STRONG><a name="[20b]"></a>WWDG_SetPrescaler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal_wwdg.o(.text.WWDG_SetPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WWDG_SetPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_Init
</UL>

<P><STRONG><a name="[20c]"></a>WWDG_SetWindowValue</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hal_wwdg.o(.text.WWDG_SetWindowValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WWDG_SetWindowValue
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_Init
</UL>

<P><STRONG><a name="[146]"></a>control_flow_check_point</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, iec60730_b_startup.o(.text.control_flow_check_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = control_flow_check_point
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_B_startup
</UL>

<P><STRONG><a name="[188]"></a>crc16</STRONG> (Thumb, 108 bytes, Stack size 28 bytes, modbuscrc.o(.text.crc16))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_vModBusHandler
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS2_vReadRegister
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS2_u8ModBusRecHandle
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_vModbusFun4
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_vModbudFun6
</UL>

<P><STRONG><a name="[1f0]"></a>exNVIC_Init</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, hal_misc.o(.text.exNVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = exNVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vNVICConfigureUART3
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vNVICConfigure
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2_Init
</UL>

<P><STRONG><a name="[1de]"></a>exRCC_APB1PeriphReset</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hal_rcc.o(.text.exRCC_APB1PeriphReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = exRCC_APB1PeriphReset
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_DeInit
</UL>

<P><STRONG><a name="[1dd]"></a>exRCC_APB2PeriphReset</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hal_rcc.o(.text.exRCC_APB2PeriphReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = exRCC_APB2PeriphReset
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[3f]"></a>fputc</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, uart_classb.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fputc &rArr; UART_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[7f]"></a>$Super$$main</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = $Super$$main &rArr; ERT_vErrorCodeAccess &rArr; SMP_vWriteWordN &rArr; EEPROM_Write &rArr; FLASH_SIM_WriteEE &rArr; FLASH_SIM_ProgramEE &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation &rArr; FLASH_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDG_Refresh
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDG_Init
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSE_vSliceTaskHandle
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vSpeedControlHandle
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Peripheral_Init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_vModbusInit
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOS_vModBusHandler
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Parameter
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_InitRunTimeChecks
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_DoRunTimeChecks
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSM_ucHandleTask
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FHE_vFunctionSafetyCheck
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCK_vInitSafeTime
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERT_vErrorCodeAccess
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUart_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Gpio_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[163]"></a>variable_reset</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, user_function.o(.text.variable_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = variable_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_SwitchForceToStop
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_SwitchForceFault
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_Init_Fast
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_SwitchRunFreewheelReady
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_SwitchRunFault
</UL>

<P><STRONG><a name="[20e]"></a>__0printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[227]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[228]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[229]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[135]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_InitRunTimeChecks
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_DoRunTimeChecks
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_ClockTest_RunTime
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_B_FlashRunTime_test
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailSafePOR
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[7b]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[22a]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[22b]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[22c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8e]"></a>EXTI9_NVIC_Config</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, board.o(.text.EXTI9_NVIC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EXTI9_NVIC_Config &rArr; EXTI_LineConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_LineConfig
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOD_vExti9Config
</UL>

<P><STRONG><a name="[8f]"></a>EXTI_NVIC_Init</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, board.o(.text.EXTI_NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EXTI_NVIC_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOD_vExti9Config
</UL>

<P><STRONG><a name="[15a]"></a>__NVIC_SetPriority</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, mm32_it.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt_Init
</UL>

<P><STRONG><a name="[181]"></a>MLIB_AddSat_Q31</STRONG> (Thumb, 108 bytes, Stack size 36 bytes, user_function.o(.text.MLIB_AddSat_Q31))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MLIB_AddSat_Q31
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLIB_FilterMA_Q15
</UL>

<P><STRONG><a name="[180]"></a>MLIB_FilterMA_Q15</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, user_function.o(.text.MLIB_FilterMA_Q15))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MLIB_FilterMA_Q15 &rArr; MLIB_SubSat_Q31
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLIB_SubSat_Q31
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLIB_ShR_Q31
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLIB_Sat_Q15
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLIB_AddSat_Q31
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Var_Filt
</UL>

<P><STRONG><a name="[158]"></a>MLIB_Neg_Q15</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, user_function.o(.text.MLIB_Neg_Q15))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MLIB_Neg_Q15
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Parameter
</UL>

<P><STRONG><a name="[184]"></a>MLIB_Sat_Q15</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, user_function.o(.text.MLIB_Sat_Q15))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MLIB_Sat_Q15
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLIB_FilterMA_Q15
</UL>

<P><STRONG><a name="[182]"></a>MLIB_ShR_Q31</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, user_function.o(.text.MLIB_ShR_Q31))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MLIB_ShR_Q31
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLIB_FilterMA_Q15
</UL>

<P><STRONG><a name="[183]"></a>MLIB_SubSat_Q31</STRONG> (Thumb, 112 bytes, Stack size 36 bytes, user_function.o(.text.MLIB_SubSat_Q31))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MLIB_SubSat_Q31
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLIB_FilterMA_Q15
</UL>

<P><STRONG><a name="[1ba]"></a>MLIB_Mul_Q15</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, speedcontrol.o(.text.MLIB_Mul_Q15))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MLIB_Mul_Q15
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_vCalcualteTargetSpeed
</UL>

<P><STRONG><a name="[11c]"></a>MCFLIB_InvPark_S16</STRONG> (Thumb, 104 bytes, Stack size 60 bytes, foc_pmsm.o(.text.MCFLIB_InvPark_S16))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MCFLIB_InvPark_S16
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Current_Controller
</UL>

<P><STRONG><a name="[119]"></a>MCFLIB_Park_S16</STRONG> (Thumb, 104 bytes, Stack size 60 bytes, foc_pmsm.o(.text.MCFLIB_Park_S16))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MCFLIB_Park_S16
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Current_Controller
</UL>

<P><STRONG><a name="[11a]"></a>MLIB_Mul_Q15</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, foc_pmsm.o(.text.MLIB_Mul_Q15))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MLIB_Mul_Q15
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMSM_Obs
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Current_Controller
</UL>

<P><STRONG><a name="[11b]"></a>MLIB_Neg_Q15</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, foc_pmsm.o(.text.MLIB_Neg_Q15))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MLIB_Neg_Q15
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Current_Controller
</UL>

<P><STRONG><a name="[15f]"></a>M1_FaultDetection</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, statemachine.o(.text.M1_FaultDetection))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = M1_FaultDetection &rArr; ERT_vErrorReport &rArr; ERT_vErrorReaction &rArr; M1_SwitchForceFault &rArr; variable_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERT_vResetErrorCode
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERT_vErrorReport
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_Stop_Fast
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_Run_Fast
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_Fault_Fast
</UL>

<P><STRONG><a name="[49]"></a>M1_RunAlignFast</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, statemachine.o(.text.M1_RunAlignFast))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = M1_RunAlignFast &rArr; FOC_Current_Controller &rArr; DcBus_Ripple_suppress &rArr; Division
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Update
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCF_Svm_7
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCFLIB_Clark_Sat_S16
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Current_Controller
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statemachine.o(.rodata.s_M1_STATE_RUN_TABLE_FAST)
</UL>
<P><STRONG><a name="[51]"></a>M1_RunAlignSlow</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, statemachine.o(.text.M1_RunAlignSlow))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = M1_RunAlignSlow &rArr; Var_Filt &rArr; MLIB_FilterMA_Q15 &rArr; MLIB_SubSat_Q31
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Var_Filt
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_SwitchRunAlignStartup
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_SwitchRunAlignReady
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statemachine.o(.rodata.s_M1_STATE_RUN_TABLE_SLOW)
</UL>
<P><STRONG><a name="[48]"></a>M1_RunBrakeFast</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, statemachine.o(.text.M1_RunBrakeFast))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = M1_RunBrakeFast &rArr; TIM_bBrakeUpdate &rArr; TIM_vSetCompareValues
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_bBrakeUpdate
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_SwitchRunWindDetAlign
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statemachine.o(.rodata.s_M1_STATE_RUN_TABLE_FAST)
</UL>
<P><STRONG><a name="[50]"></a>M1_RunBrakeSlow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, statemachine.o(.text.M1_RunBrakeSlow))
<BR>[Address Reference Count : 1]<UL><LI> statemachine.o(.rodata.s_M1_STATE_RUN_TABLE_SLOW)
</UL>
<P><STRONG><a name="[45]"></a>M1_RunCalibFast</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, statemachine.o(.text.M1_RunCalibFast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = M1_RunCalibFast
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_SwitchRunCalibReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statemachine.o(.rodata.s_M1_STATE_RUN_TABLE_FAST)
</UL>
<P><STRONG><a name="[4d]"></a>M1_RunCalibSlow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, statemachine.o(.text.M1_RunCalibSlow))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = M1_RunCalibSlow &rArr; Var_Filt &rArr; MLIB_FilterMA_Q15 &rArr; MLIB_SubSat_Q31
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Var_Filt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statemachine.o(.rodata.s_M1_STATE_RUN_TABLE_SLOW)
</UL>
<P><STRONG><a name="[4c]"></a>M1_RunFreewheelFast</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, statemachine.o(.text.M1_RunFreewheelFast))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = M1_RunFreewheelFast &rArr; PWM_Update &rArr; MLIB_Mul_Q15
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Update
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCF_Svm_7
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERT_vResetErrorCount
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCFLIB_Clark_Sat_S16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statemachine.o(.rodata.s_M1_STATE_RUN_TABLE_FAST)
</UL>
<P><STRONG><a name="[54]"></a>M1_RunFreewheelSlow</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, statemachine.o(.text.M1_RunFreewheelSlow))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = M1_RunFreewheelSlow &rArr; Var_Filt &rArr; MLIB_FilterMA_Q15 &rArr; MLIB_SubSat_Q31
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Var_Filt
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_SwitchRunFreewheelReady
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statemachine.o(.rodata.s_M1_STATE_RUN_TABLE_SLOW)
</UL>
<P><STRONG><a name="[46]"></a>M1_RunReadyFast</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, statemachine.o(.text.M1_RunReadyFast))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = M1_RunReadyFast &rArr; TIM_bSetOutputConfig &rArr; TIM_vSetCompareValues
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_bSetOutputConfig
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Update
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCF_Svm_7
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_SwitchRunReadyWindDet
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUR_vCurRMSFilterInit
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statemachine.o(.rodata.s_M1_STATE_RUN_TABLE_FAST)
</UL>
<P><STRONG><a name="[4e]"></a>M1_RunReadySlow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, statemachine.o(.text.M1_RunReadySlow))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = M1_RunReadySlow &rArr; Var_Filt &rArr; MLIB_FilterMA_Q15 &rArr; MLIB_SubSat_Q31
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Var_Filt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statemachine.o(.rodata.s_M1_STATE_RUN_TABLE_SLOW)
</UL>
<P><STRONG><a name="[4b]"></a>M1_RunSpinFast</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, statemachine.o(.text.M1_RunSpinFast))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = M1_RunSpinFast &rArr; FOC_Current_Controller &rArr; DcBus_Ripple_suppress &rArr; Division
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Update
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOT_vAngleSmoothSwitch
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCF_Svm_7
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCFLIB_Clark_Sat_S16
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMSM_Obs
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Current_Controller
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statemachine.o(.rodata.s_M1_STATE_RUN_TABLE_FAST)
</UL>
<P><STRONG><a name="[53]"></a>M1_RunSpinSlow</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, statemachine.o(.text.M1_RunSpinSlow))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = M1_RunSpinSlow &rArr; Var_Filt &rArr; MLIB_FilterMA_Q15 &rArr; MLIB_SubSat_Q31
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Var_Filt
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLIB_Ramp_Q31
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLIB_Conv_Q31s
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLIB_Conv_Q15l
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_SwitchRunSpinFreewheel
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLIB_PIControl_Q15
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statemachine.o(.rodata.s_M1_STATE_RUN_TABLE_SLOW)
</UL>
<P><STRONG><a name="[4a]"></a>M1_RunStartupFast</STRONG> (Thumb, 376 bytes, Stack size 40 bytes, statemachine.o(.text.M1_RunStartupFast))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = M1_RunStartupFast &rArr; FOC_Current_Controller &rArr; DcBus_Ripple_suppress &rArr; Division
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Update
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCF_Svm_7
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLIB_Mul_Q15
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCFLIB_Clark_Sat_S16
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLIB_SinCos
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLIB_SMO
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLIB_PLL
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Current_Controller
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statemachine.o(.rodata.s_M1_STATE_RUN_TABLE_FAST)
</UL>
<P><STRONG><a name="[52]"></a>M1_RunStartupSlow</STRONG> (Thumb, 380 bytes, Stack size 32 bytes, statemachine.o(.text.M1_RunStartupSlow))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = M1_RunStartupSlow &rArr; Var_Filt &rArr; MLIB_FilterMA_Q15 &rArr; MLIB_SubSat_Q31
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Var_Filt
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLIB_Ramp_Q31
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERT_vErrorReport
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLIB_Conv_Q31s
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLIB_Conv_Q15l
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_SwitchRunStartupSpin
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_SwitchRunStartupFreewheel
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_SwitchRunFault
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statemachine.o(.rodata.s_M1_STATE_RUN_TABLE_SLOW)
</UL>
<P><STRONG><a name="[47]"></a>M1_RunWindDetFast</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, statemachine.o(.text.M1_RunWindDetFast))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = M1_RunWindDetFast &rArr; Var_Filt &rArr; MLIB_FilterMA_Q15 &rArr; MLIB_SubSat_Q31
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Var_Filt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statemachine.o(.rodata.s_M1_STATE_RUN_TABLE_FAST)
</UL>
<P><STRONG><a name="[4f]"></a>M1_RunWindDetSlow</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, statemachine.o(.text.M1_RunWindDetSlow))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = M1_RunWindDetSlow &rArr; WDN_vAnalyzeStartPower &rArr; WDN_vConfigureStartupParam &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Var_Filt
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDN_vAnalyzeStartPower
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDN_bEstimateStartupScenario
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_SwitchRunWindDetReady
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_SwitchRunWindDetAlign
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statemachine.o(.rodata.s_M1_STATE_RUN_TABLE_SLOW)
</UL>
<P><STRONG><a name="[164]"></a>M1_SwitchInitStop</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, statemachine.o(.text.M1_SwitchInitStop))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_Init_Fast
</UL>

<P><STRONG><a name="[169]"></a>M1_SwitchRunAlignReady</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, statemachine.o(.text.M1_SwitchRunAlignReady))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunAlignSlow
</UL>

<P><STRONG><a name="[16a]"></a>M1_SwitchRunAlignStartup</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, statemachine.o(.text.M1_SwitchRunAlignStartup))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunAlignSlow
</UL>

<P><STRONG><a name="[16d]"></a>M1_SwitchRunCalibReady</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, statemachine.o(.text.M1_SwitchRunCalibReady))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunCalibFast
</UL>

<P><STRONG><a name="[17b]"></a>M1_SwitchRunFault</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, statemachine.o(.text.M1_SwitchRunFault))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = M1_SwitchRunFault &rArr; variable_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;variable_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunStartupSlow
</UL>

<P><STRONG><a name="[16f]"></a>M1_SwitchRunFreewheelReady</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, statemachine.o(.text.M1_SwitchRunFreewheelReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = M1_SwitchRunFreewheelReady &rArr; variable_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;variable_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunFreewheelSlow
</UL>

<P><STRONG><a name="[177]"></a>M1_SwitchRunSpinFreewheel</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, statemachine.o(.text.M1_SwitchRunSpinFreewheel))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunSpinSlow
</UL>

<P><STRONG><a name="[179]"></a>M1_SwitchRunStartupFreewheel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, statemachine.o(.text.M1_SwitchRunStartupFreewheel))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunStartupSlow
</UL>

<P><STRONG><a name="[17a]"></a>M1_SwitchRunStartupSpin</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, statemachine.o(.text.M1_SwitchRunStartupSpin))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunStartupSlow
</UL>

<P><STRONG><a name="[17f]"></a>M1_SwitchStopRun</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, statemachine.o(.text.M1_SwitchStopRun))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_Stop_Slow
</UL>

<P><STRONG><a name="[165]"></a>MCFLIB_Clark_Sat_S16</STRONG> (Thumb, 124 bytes, Stack size 36 bytes, statemachine.o(.text.MCFLIB_Clark_Sat_S16))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MCFLIB_Clark_Sat_S16
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunStartupFast
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunSpinFast
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunFreewheelFast
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunAlignFast
</UL>

<P><STRONG><a name="[176]"></a>MLIB_Conv_Q15l</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, statemachine.o(.text.MLIB_Conv_Q15l))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MLIB_Conv_Q15l
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunStartupSlow
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunSpinSlow
</UL>

<P><STRONG><a name="[175]"></a>MLIB_Conv_Q31s</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, statemachine.o(.text.MLIB_Conv_Q31s))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MLIB_Conv_Q31s
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunStartupSlow
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunSpinSlow
</UL>

<P><STRONG><a name="[178]"></a>MLIB_Mul_Q15</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, statemachine.o(.text.MLIB_Mul_Q15))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MLIB_Mul_Q15
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Update
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1_RunStartupFast
</UL>

<P><STRONG><a name="[11d]"></a>FPL_vEvaluateCurrentAsymmetry</STRONG> (Thumb, 512 bytes, Stack size 64 bytes, fsphaseloss.o(.text.FPL_vEvaluateCurrentAsymmetry))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FPL_vEvaluateCurrentAsymmetry &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_vOpenPhaseCheckComplex
</UL>

<P><STRONG><a name="[11f]"></a>FPL_vEvaluateStaticVector</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, fsphaseloss.o(.text.FPL_vEvaluateStaticVector))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FPL_vEvaluateStaticVector
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUR_tGetPhaseCurrentCalPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_vOpenPhaseCheckComplex
</UL>

<P><STRONG><a name="[121]"></a>FPL_vEvaluateVoltageAsymmetry</STRONG> (Thumb, 392 bytes, Stack size 56 bytes, fsphaseloss.o(.text.FPL_vEvaluateVoltageAsymmetry))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FPL_vEvaluateVoltageAsymmetry &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_vOpenPhaseCheckComplex
</UL>

<P><STRONG><a name="[12a]"></a>MLIB_Mul_Q15</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, fsrotorlock.o(.text.MLIB_Mul_Q15))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MLIB_Mul_Q15
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRK_vcalcBemf
</UL>

<P><STRONG><a name="[1ca]"></a>MLIB_Mul_Q15</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, speedmonitor.o(.text.MLIB_Mul_Q15))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MLIB_Mul_Q15
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMR_vIndependentMotorModelCalculation
</UL>

<P><STRONG><a name="[106]"></a>MLIB_Mul_Q15</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, fscommon.o(.text.MLIB_Mul_Q15))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MLIB_Mul_Q15
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCN_vGetPhaseVoltage
</UL>

<P><STRONG><a name="[12d]"></a>FSM_bInitMonitors</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, fsmonitor.o(.text.FSM_bInitMonitors))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FSM_bInitMonitors
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSM_ucHandleTask
</UL>

<P><STRONG><a name="[12c]"></a>FSM_vHandleMonitors</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, fsmonitor.o(.text.FSM_vHandleMonitors))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FSM_vHandleMonitors
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSM_ucHandleTask
</UL>

<P><STRONG><a name="[ae]"></a>CUR_vCalcCurrentQuantities</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, current.o(.text.CUR_vCalcCurrentQuantities))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CUR_vCalcCurrentQuantities &rArr; MCFLIB_Clark_Sat_S16
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIR_vCalcFilter
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPM_ulSqrt
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCFLIB_Clark_Sat_S16
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUR_bCheckMotCurrentMeasValues
</UL>

<P><STRONG><a name="[ad]"></a>CUR_vCheckMotCurrentMeasOffsetVoltage</STRONG> (Thumb, 436 bytes, Stack size 120 bytes, current.o(.text.CUR_vCheckMotCurrentMeasOffsetVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = CUR_vCheckMotCurrentMeasOffsetVoltage &rArr; FIR_vCalcFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STK_tGetSafeTime
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIR_vCalcFilter
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUR_vResetCurrentValues
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUR_bCheckMotCurrentMeasValues
</UL>

<P><STRONG><a name="[b7]"></a>CUR_vResetCurrentValues</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, current.o(.text.CUR_vResetCurrentValues))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUR_vCheckMotCurrentMeasOffsetVoltage
</UL>

<P><STRONG><a name="[b5]"></a>MCFLIB_Clark_Sat_S16</STRONG> (Thumb, 124 bytes, Stack size 36 bytes, current.o(.text.MCFLIB_Clark_Sat_S16))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MCFLIB_Clark_Sat_S16
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUR_vCalcCurrentQuantities
</UL>

<P><STRONG><a name="[1fa]"></a>VOL_bCheckOverVoltageCondition</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, voltage.o(.text.VOL_bCheckOverVoltageCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = VOL_bCheckOverVoltageCondition &rArr; STK_tGetSafeTime
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STK_tGetSafeTime
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOL_tGetDclVolV
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOL_bVoltageErrorDetection
</UL>

<P><STRONG><a name="[1fc]"></a>VOL_bCheckUnderVoltageCondition</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, voltage.o(.text.VOL_bCheckUnderVoltageCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = VOL_bCheckUnderVoltageCondition &rArr; STK_tGetSafeTime
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STK_tGetSafeTime
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOL_tGetDclVolV
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOL_bVoltageErrorDetection
</UL>

<P><STRONG><a name="[1fd]"></a>VOL_vCalcVolLowPassFilters</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, voltage.o(.text.VOL_vCalcVolLowPassFilters))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = VOL_vCalcVolLowPassFilters &rArr; FIR_vCalcFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIR_vCalcFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOL_bHandleTask
</UL>

<P><STRONG><a name="[200]"></a>VOL_vCheck15VVoltageCondition</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, voltage.o(.text.VOL_vCheck15VVoltageCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = VOL_vCheck15VVoltageCondition &rArr; ERT_vErrorReport &rArr; ERT_vErrorReaction &rArr; M1_SwitchForceFault &rArr; variable_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERT_vResetErrorCode
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERT_vErrorReport
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOL_tGet15VolmV
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOL_bVoltageErrorDetection
</UL>

<P><STRONG><a name="[1ff]"></a>VOL_vCheckInternalReferenceVoltageCondition</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, voltage.o(.text.VOL_vCheckInternalReferenceVoltageCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = VOL_vCheckInternalReferenceVoltageCondition &rArr; ERT_vErrorReport &rArr; ERT_vErrorReaction &rArr; M1_SwitchForceFault &rArr; variable_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERT_vResetErrorCode
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERT_vErrorReport
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOL_tGetInternalVoltRefVolmV
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOL_bVoltageErrorDetection
</UL>

<P><STRONG><a name="[cb]"></a>HDIV_SignInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drv_div.o(.text.HDIV_SignInit))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Hwdiv_Init
</UL>

<P><STRONG><a name="[1e9]"></a>TIM_vDutyCycleToCompare</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, drv_pwm.o(.text.TIM_vDutyCycleToCompare))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_vDutyCycleToCompare
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_bSetOutputConfig
</UL>

<P><STRONG><a name="[1f5]"></a>UART_vNVICConfigure</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, drv_sci.o(.text.UART_vNVICConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART_vNVICConfigure &rArr; exNVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exNVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vCONSOLE_Init
</UL>

<P><STRONG><a name="[111]"></a>FLASH_SIM_EraseEE</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, drv_eep.o(.text.FLASH_SIM_EraseEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FLASH_SIM_EraseEE &rArr; FLASH_ErasePage &rArr; FLASH_WaitForLastOperation &rArr; FLASH_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SIM_WriteEE
</UL>

<P><STRONG><a name="[115]"></a>FLASH_SIM_FindEmpty</STRONG> (Thumb, 104 bytes, Stack size 28 bytes, drv_eep.o(.text.FLASH_SIM_FindEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FLASH_SIM_FindEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SIM_WriteLocate
</UL>

<P><STRONG><a name="[114]"></a>FLASH_SIM_ProgramEE</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, drv_eep.o(.text.FLASH_SIM_ProgramEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = FLASH_SIM_ProgramEE &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation &rArr; FLASH_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SIM_WriteEE
</UL>

<P><STRONG><a name="[f2]"></a>FLASH_SIM_WriteEE</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, drv_eep.o(.text.FLASH_SIM_WriteEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = FLASH_SIM_WriteEE &rArr; FLASH_SIM_ProgramEE &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation &rArr; FLASH_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SIM_WriteLocate
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SIM_ProgramEE
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SIM_EraseEE
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write
</UL>

<P><STRONG><a name="[1f7]"></a>UART_vNVICConfigureUART3</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, drv_sci_2.o(.text.UART_vNVICConfigureUART3))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART_vNVICConfigureUART3 &rArr; exNVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exNVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vCONSOLE_InitUART3
</UL>

<P><STRONG><a name="[1e0]"></a>TI1_Configure</STRONG> (Thumb, 84 bytes, Stack size 56 bytes, hal_tim.o(.text.TI1_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TI1_Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1e2]"></a>TI2_Configure</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, hal_tim.o(.text.TI2_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TI2_Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1e4]"></a>TI3_Configure</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, hal_tim.o(.text.TI3_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TI3_Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1e6]"></a>TI4_Configure</STRONG> (Thumb, 94 bytes, Stack size 56 bytes, hal_tim.o(.text.TI4_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TI4_Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1cd]"></a>SetSysClock</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, system_mm32spin0280.o(.text.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = SetSysClock &rArr; SetSysClockWithHsiPLL &rArr; AutoCalPllFactor &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockWithHsiPLL
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1d4]"></a>SetSysClockToDefaultHSI</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, system_mm32spin0280.o(.text.SetSysClockToDefaultHSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetSysClockToDefaultHSI
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1ce]"></a>SetSysClockWithHsiPLL</STRONG> (Thumb, 404 bytes, Stack size 56 bytes, system_mm32spin0280.o(.text.SetSysClockWithHsiPLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = SetSysClockWithHsiPLL &rArr; AutoCalPllFactor &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoCalPllFactor
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_x_cycle
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[1cf]"></a>delay_x_cycle</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, system_mm32spin0280.o(.text.delay_x_cycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = delay_x_cycle
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockWithHsiPLL
</UL>

<P><STRONG><a name="[144]"></a>__NVIC_SystemReset</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, iec60730_b_aux.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_B_WDGSelfTest
</UL>

<P><STRONG><a name="[154]"></a>SysTick_Config</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, iec60730_b_runtimetest.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEC60730_InitRunTimeChecks
</UL>

<P><STRONG><a name="[1d0]"></a>__NVIC_SetPriority</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, iec60730_b_runtimetest.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>

<P><STRONG><a name="[63]"></a>MLIB_AddSat_Q31</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MLIB_AddSat_Q31
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLIB_Ramp_Q31
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLIB_PLL
</UL>

<P><STRONG><a name="[60]"></a>MLIB_ShLBi_Q31</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mlib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLIB_SMO
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLIB_PLL
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLIB_PIControl_Q15
</UL>

<P><STRONG><a name="[38]"></a>CPUTstCont</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iec60730_b_cpurunkeil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> iec60730_b_cpurunkeil.o(.text)
</UL>
<P><STRONG><a name="[39]"></a>CPUTstCont</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iec60730_b_cpustartkeil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> iec60730_b_cpustartkeil.o(.text)
</UL>
<P><STRONG><a name="[210]"></a>_fp_digits</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[20f]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[213]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[212]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
